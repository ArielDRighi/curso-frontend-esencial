function courseApp() {
  return {
    currentView: "dashboard",
    selectedModule: null,
    darkMode: false,
    referenceTab: "cheatsheet",

    modules: [
      {
        emoji: "üé®",
        title: "M√≥dulo 0: Fundamentos de UI/UX para Frontend",
        shortTitle: "UI/UX",
        objective:
          "Comprender los principios clave de dise√±o de interfaces y experiencia de usuario para optimizar la colaboraci√≥n con IA.",
        completed: false,
        sections: [
          {
            title: "0.1 Conceptos Clave de UI/UX",
            content: [
              "<p><em>UI/UX son disciplinas que se enfocan en hacer que las aplicaciones sean usables y agradables para los usuarios finales, similar a como dise√±as APIs pensando en otros desarrolladores.</em></p>",
              "<p><strong>UX (User Experience):</strong> C√≥mo se siente y fluye la interacci√≥n del usuario. Eval√∫a facilidad de uso, eficiencia y satisfacci√≥n.</p>",
              "<p><em>Es como el dise√±o de tu API: si es intuitiva, consistente y f√°cil de usar, la experiencia del desarrollador es buena.</em></p>",
              "<p><strong>UI (User Interface):</strong> La capa visual, est√©tica y tangible con la que el usuario interact√∫a.</p>",
              "<p><em>Son los botones, formularios, colores y tipograf√≠a que el usuario ve. Como la documentaci√≥n de tu API: debe ser clara y visualmente organizada.</em></p>",
              "<p><strong>Dise√±o Centrado en el Usuario (UCD):</strong> Proceso iterativo en el que las decisiones de dise√±o se basan en necesidades reales del usuario.</p>",
              "<p><em>Similar a dise√±ar endpoints bas√°ndote en casos de uso reales, no en lo que asumes que necesitan.</em></p>",
              "<p><strong>Accesibilidad (A11y):</strong> Garantizar que la aplicaci√≥n pueda ser usada por personas con discapacidades (lectores de pantalla, navegaci√≥n por teclado, etc.).</p>",
              "<p><em>Es como asegurar que tu API funcione con diferentes clientes y librer√≠as, no solo con una herramienta espec√≠fica.</em></p>",
            ],
          },
          {
            title: "0.2 Principios Fundamentales de UX",
            content: [
              "<p><em>Estos principios aseguran que los usuarios puedan completar sus tareas de forma eficiente, similar a como dise√±as APIs que sean predecibles y confiables.</em></p>",
              "<p><strong>Claridad antes que est√©tica:</strong> Lo bonito importa, pero la comprensi√≥n inmediata es prioritaria.</p>",
              "<p><em>Un bot√≥n debe verse claramente como bot√≥n, aunque no sea el m√°s hermoso. Como un endpoint que debe ser obvio qu√© hace, aunque el nombre no sea elegante.</em></p>",
              "<p><strong>Prevenci√≥n de errores:</strong> Dise√±ar flujos que eviten acciones no deseadas.</p>",
              "<p><em>Validaciones en el frontend, confirmaciones para acciones destructivas. Como validar par√°metros antes de procesar en tu API.</em></p>",
              "<p><strong>Consistencia de interacci√≥n:</strong> Patrones iguales para acciones iguales.</p>",
              '<p><em>Si un bot√≥n rojo significa "eliminar" en una parte, debe significar lo mismo en toda la app. Como usar c√≥digos de estado HTTP consistentes.</em></p>',
              '<p><strong>Minimizar carga cognitiva:</strong> Evitar que el usuario tenga que "pensar" demasiado.</p>',
              "<p><em>No sobrecargar la interfaz con opciones. Como mantener tus endpoints simples y enfocados en una sola responsabilidad.</em></p>",
              "<p><strong>Feedback inmediato:</strong> Confirmar acciones, estados y errores en tiempo real.</p>",
              "<p><em>Mostrar loading, confirmaciones y errores de forma clara. Como retornar respuestas informativas desde tu API.</em></p>",
            ],
          },
          {
            title: "0.3 Principios Fundamentales de UI",
            content: [
              "<p><strong>Jerarqu√≠a visual:</strong> Uso estrat√©gico de tama√±o, color y posici√≥n para guiar la atenci√≥n</p>",
              "<p><strong>Espaciado y alineaci√≥n:</strong> Crear armon√≠a y orden en la interfaz</p>",
              "<p><strong>Tipograf√≠a funcional:</strong> Legibilidad en todos los dispositivos</p>",
              "<p><strong>Paleta de colores funcional:</strong> Contraste suficiente, consistencia con la marca y cumplimiento de gu√≠as WCAG</p>",
              "<p><strong>Componentes reutilizables:</strong> Unificar botones, inputs y layouts para coherencia</p>",
            ],
          },
          {
            title: "0.4 Dise√±o Responsivo y Adaptativo",
            content: [
              "<p><strong>Mobile-first:</strong> Dise√±ar pensando primero en pantallas peque√±as</p>",
              "<p><strong>Breakpoints clave:</strong> <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code> en Tailwind</p>",
              "<p><strong>Pruebas cruzadas:</strong> Validar UI en distintos dispositivos y navegadores</p>",
            ],
          },
          {
            title: "0.5 Herramientas para Auditar y Trabajar con Dise√±os",
            content: [
              "<p><strong>Figma / Penpot:</strong> Lectura e inspecci√≥n de dise√±os (medidas, colores, assets)</p>",
              "<p><strong>Storybook:</strong> Cat√°logo vivo de componentes UI para testear y documentar</p>",
              "<p><strong>Wave Accessibility Tool o axe DevTools:</strong> Auditor√≠a de accesibilidad</p>",
              "<p><strong>Contrast Checker:</strong> Validar niveles de contraste de color</p>",
              "<p><strong>Zeplin:</strong> Para colaboraci√≥n con dise√±adores</p>",
            ],
          },
          {
            title: "0.6 UI/UX con IA",
            content: [
              "<p><strong>Prompts para UI:</strong> C√≥mo pedir a la IA que sugiera estructuras visuales coherentes</p>",
              "<p><strong>Validaci√≥n de c√≥digo UI con IA:</strong> Revisar si la implementaci√≥n respeta el dise√±o original</p>",
              "<p><strong>Generaci√≥n de componentes accesibles:</strong> Solicitar que el c√≥digo cumpla est√°ndares WCAG 2.1</p>",
            ],
          },
          {
            title: "0.7 Patrones de Dise√±o UI Comunes",
            content: [
              "<p><strong>Patrones de Navegaci√≥n:</strong> Men√∫s hamburguesa, breadcrumbs, paginaci√≥n</p>",
              "<p><strong>Patrones de Formularios:</strong> Validaci√≥n en tiempo real, estados de carga, mensajes de error</p>",
              "<p><strong>Patrones de Feedback:</strong> Toasts, modales, tooltips, progress bars</p>",
              "<p><strong>Patrones de Contenido:</strong> Cards, listas, tablas responsivas, carruseles</p>",
            ],
          },
          {
            title: "0.8 Sistema de Design Tokens",
            content: [
              "<p><strong>Concepto:</strong> Variables reutilizables para mantener consistencia visual</p>",
              "<p><strong>Implementaci√≥n en Tailwind:</strong> Personalizaci√≥n del tema</p>",
              "<p><strong>Espaciado consistente:</strong> Escala de 4pt/8pt</p>",
              "<p><strong>Jerarqu√≠a tipogr√°fica:</strong> Escalas modulares</p>",
            ],
          },
          {
            title: "0.9 Ejercicio Pr√°ctico",
            content: [
              "<p><strong>Objetivo:</strong> Aplicar los conceptos aprendidos en un ejercicio real.</p>",
              "<ol class='list-decimal pl-6 space-y-2'>",
              "<li>Analizar un dise√±o en Figma y escribir un prompt para IA que genere:",
              "<ul class='list-disc pl-6 mt-2 space-y-1'>",
              "<li>Estructura HTML/JSX</li>",
              "<li>Estilos en Tailwind</li>",
              "<li>Accesibilidad integrada (atributos aria, label)</li>",
              "</ul></li>",
              "<li>Implementar la UI y probarla con herramientas de accesibilidad</li>",
              "</ol>",
              "<p class='mt-4'><strong>Entregable:</strong> Componente funcional con accesibilidad validada</p>",
            ],
          },
        ],
      },
      {
        emoji: "üåê",
        title: "M√≥dulo 1: Fundamentos del Desarrollo Web",
        shortTitle: "Web Fundamentals",
        objective:
          "Dominar los fundamentos de HTML, CSS, JavaScript y el ecosistema frontend desde la perspectiva backend.",
        completed: false,
        sections: [
          {
            title: "1.1 Introducci√≥n al Frontend desde la Perspectiva Backend",
            content: [
              "<p><em>El frontend es tu interfaz de usuario, mientras que tu backend es el motor que procesa la l√≥gica de negocio. Ambos se comunican a trav√©s de APIs.</em></p>",
              "<p><strong>¬øQu√© es el Frontend?</strong> La capa visual e interactiva que el usuario final ve</p>",
              "<p><em>Es la parte que se ejecuta en el navegador del usuario, como una app m√≥vil pero en web. Consume los datos de tu backend.</em></p>",
              '<p><strong>El Navegador como Cliente:</strong> El navegador es tu "cliente" principal, ejecutando c√≥digo JavaScript</p>',
              "<p><em>El navegador hace peticiones HTTP a tu backend, igual que Postman, pero tambi√©n renderiza la interfaz y maneja interacciones del usuario.</em></p>",
              "<p><strong>Herramientas de Desarrollador del Navegador (DevTools):</strong> Tu principal herramienta para depurar</p>",
              "<p><em>Similar a los logs de tu servidor, pero para el frontend. Puedes ver requests, errores, y el estado de la aplicaci√≥n.</em></p>",
              "<p><strong>Ciclo de Vida de una Petici√≥n Web:</strong> Petici√≥n del navegador ‚Üí Servidor ‚Üí Respuesta del servidor ‚Üí Renderizado en el navegador</p>",
              '<p><em>El navegador solicita tu HTML/CSS/JS, tu servidor responde, y luego el navegador "pinta" la interfaz y ejecuta la l√≥gica.</em></p>',
            ],
          },
          {
            title: "1.2 HTML: La Estructura del Contenido",
            content: [
              "<p><em>HTML es como el esquema de tu base de datos: define la estructura y jerarqu√≠a, pero no la funcionalidad ni el estilo.</em></p>",
              "<p><strong>Concepto:</strong> El lenguaje de marcado est√°ndar para crear p√°ginas web</p>",
              "<p><em>Es un lenguaje declarativo que describe qu√© elementos tiene tu p√°gina: t√≠tulos, p√°rrafos, botones. No tiene l√≥gica, solo estructura.</em></p>",
              "<p><strong>Etiquetas Fundamentales:</strong> &lt;html&gt;, &lt;head&gt;, &lt;body&gt;, &lt;div&gt;, &lt;p&gt;, &lt;h1&gt; a &lt;h6&gt;, &lt;a&gt;, &lt;img&gt;</p>",
              "<p><em>Son como contenedores que organizan tu contenido. &lt;div&gt; es como un objeto gen√©rico, &lt;p&gt; para texto, &lt;a&gt; para enlaces.</em></p>",
              "<p><strong>Elementos Sem√°nticos:</strong> &lt;header&gt;, &lt;nav&gt;, &lt;main&gt;, &lt;section&gt;, &lt;article&gt;, &lt;footer&gt;</p>",
              "<p><em>Etiquetas que indican el prop√≥sito del contenido, no solo su apariencia. Como nombrar bien tus variables y funciones.</em></p>",
              "<p><strong>Formularios:</strong> C√≥mo los usuarios interact√∫an y env√≠an datos</p>",
              "<p><em>Los inputs, selects y buttons que permiten al usuario enviar informaci√≥n a tu backend, similar a los par√°metros de una API.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-html">&lt;main&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Mi Aplicaci√≥n&lt;/h1&gt;\n  &lt;/header&gt;\n  &lt;section&gt;\n    &lt;article&gt;Contenido...&lt;/article&gt;\n  &lt;/section&gt;\n&lt;/main&gt;</code></pre></div>',
            ],
          },
          {
            title: "1.3 CSS: Estilizando la Experiencia de Usuario",
            content: [
              "<p><em>CSS es como la configuraci√≥n de presentaci√≥n: define c√≥mo se ven los elementos HTML, pero no su funcionalidad.</em></p>",
              "<p><strong>Concepto:</strong> El lenguaje utilizado para dar estilo y dise√±o a las p√°ginas web</p>",
              "<p><em>Controla colores, tama√±os, posiciones y animaciones. Es puramente visual, como elegir el formato JSON vs XML para tu API.</em></p>",
              "<p><strong>Selectores:</strong> Elemento, clase, ID, atributos</p>",
              '<p><em>Formas de "apuntar" a elementos HTML espec√≠ficos para aplicarles estilos. Como filtros en una consulta de base de datos.</em></p>',
              "<p><strong>El Modelo de Caja (Box Model):</strong> margin, border, padding, content</p>",
              "<p><em>Cada elemento HTML es una caja rectangular. Margin es el espacio exterior, padding el interior, como los espaciados en un layout.</em></p>",
              "<p><strong>Layouts Modernos:</strong></p>",
              "<p><strong>‚Ä¢ Flexbox:</strong> Para alinear y distribuir elementos en una sola dimensi√≥n</p>",
              "<p><em>Como organizar elementos en una fila o columna con distribuci√≥n autom√°tica del espacio.</em></p>",
              "<p><strong>‚Ä¢ Grid:</strong> Para crear dise√±os complejos bidimensionales</p>",
              "<p><em>Como una tabla pero m√°s flexible, para layouts tipo dashboard con filas y columnas.</em></p>",
              "<p><strong>Dise√±o Responsivo:</strong> Adaptar tu interfaz para diferentes tama√±os de pantalla</p>",
              "<p><em>Como hacer que tu API responda diferente seg√∫n el cliente, pero para dispositivos m√≥viles vs desktop.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-css">.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n\n.grid-layout {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  gap: 20px;\n}</code></pre></div>',
            ],
          },
          {
            title: "1.4 JavaScript: La L√≥gica Interactiva del Frontend",
            content: [
              "<p><em>JavaScript es tu lenguaje de programaci√≥n para el frontend, como Node.js en el backend, pero se ejecuta en el navegador del usuario.</em></p>",
              "<p><strong>Concepto:</strong> El lenguaje de programaci√≥n que a√±ade interactividad</p>",
              "<p><em>Maneja clicks, validaciones, llamadas a APIs y actualizaciones din√°micas. Es el √∫nico lenguaje que ejecutan los navegadores nativamente.</em></p>",
              "<p><strong>Fundamentos Modernos (ES6+):</strong> var, let, const, tipos de datos, operadores, estructuras de control, bucles</p>",
              "<p><em>Similar a cualquier lenguaje: variables, condiciones, loops. ES6+ son las versiones modernas con mejores caracter√≠sticas.</em></p>",
              "<p><strong>Manipulaci√≥n del DOM:</strong> Acceder y modificar elementos HTML</p>",
              "<p><em>El DOM es la representaci√≥n en memoria de tu HTML. Puedes cambiar texto, agregar elementos, como modificar objetos en tu c√≥digo.</em></p>",
              "<p><strong>JavaScript As√≠ncrono:</strong> callbacks, Promises, async/await</p>",
              "<p><em>Como manejas operaciones as√≠ncronas en Node.js, pero en el navegador. Para no bloquear la interfaz mientras esperas respuestas.</em></p>",
              "<p><strong>Trabajo con APIs (fetch):</strong> Realizar peticiones HTTP a tu backend</p>",
              "<p><em>Como usar axios o fetch en Node.js, pero desde el navegador hacia tu servidor. El frontend consume tu API REST.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-javascript">const fetchData = async () => {\n  try {\n    const response = await fetch("/api/data");\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error("Error:", error);\n  }\n};\n\n// Manipulaci√≥n del DOM\nconst button = document.getElementById("myButton");\nbutton.addEventListener("click", fetchData);</code></pre></div>',
            ],
          },
          {
            title: "1.5 Git y GitHub: Control de Versiones para Colaboraci√≥n",
            content: [
              "<p><strong>Concepto:</strong> Un sistema de control de versiones distribuido</p>",
              "<p><strong>Comandos Esenciales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><code>git init</code>, <code>git clone</code> - Inicializar/clonar repositorios</li>",
              "<li><code>git add</code>, <code>git commit</code> - Preparar y confirmar cambios</li>",
              "<li><code>git status</code>, <code>git log</code> - Ver estado e historial</li>",
              "<li><code>git branch</code>, <code>git checkout</code>, <code>git merge</code> - Manejo de ramas</li>",
              "<li><code>git pull</code>, <code>git push</code>, <code>git remote</code> - Sincronizaci√≥n</li>",
              "</ul>",
              "<p><strong>Flujos de Trabajo:</strong> fork, pull request, code review</p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-bash"># Flujo t√≠pico\ngit clone https://github.com/user/repo.git\ncd repo\ngit checkout -b feature/nueva-funcionalidad\n# ... hacer cambios ...\ngit add .\ngit commit -m "feat: agregar nueva funcionalidad"\ngit push origin feature/nueva-funcionalidad</code></pre></div>',
            ],
          },
          {
            title: "1.6 Fundamentos de Performance Web",
            content: [
              "<p><em>La performance web es como optimizar consultas SQL: mides, identificas cuellos de botella y aplicas t√©cnicas espec√≠ficas.</em></p>",
              "<p><strong>Core Web Vitals:</strong> M√©tricas clave para medir la experiencia del usuario</p>",
              "<p><em>Son como los KPIs de tu aplicaci√≥n web. Google los usa para ranking, similar a como monitoreamos latencia en APIs.</em></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>LCP (Largest Contentful Paint):</strong> Tiempo de carga del elemento principal (&lt; 2.5s)</li>",
              "<li><em>Como el tiempo de respuesta de tu endpoint m√°s pesado. Debe ser r√°pido para buena UX.</em></li>",
              "<li><strong>FID (First Input Delay):</strong> Tiempo de respuesta a la primera interacci√≥n (&lt; 100ms)</li>",
              "<li><em>Similar al tiempo que tarda tu API en procesar la primera request. La p√°gina debe responder inmediatamente.</em></li>",
              "<li><strong>CLS (Cumulative Layout Shift):</strong> Estabilidad visual durante la carga (&lt; 0.1)</li>",
              "<li><em>Como evitar que tu API cambie contratos inesperadamente. El layout no debe 'saltar' al cargar.</em></li>",
              "</ul>",
              "<p><strong>Optimizaci√≥n de im√°genes y assets:</strong></p>",
              "<p><em>Como optimizar el tama√±o de respuestas de tu API: comprimes, cacheas y sirves solo lo necesario.</em></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Formatos modernos:</strong> WebP, AVIF (menor tama√±o, mejor calidad)</li>",
              "<li><strong>Compresi√≥n:</strong> Ajustar calidad y dimensiones seg√∫n contexto</li>",
              "<li><strong>Lazy loading:</strong> Cargar im√°genes solo cuando van a ser visibles</li>",
              "<li><strong>CDN y caching:</strong> Usar Cloudflare, AWS CloudFront para distribuci√≥n global</li>",
              "</ul>",
              "<p><strong>Lazy loading y code splitting:</strong></p>",
              "<p><em>Como carga diferida en microservicios: no cargas todo de una vez, solo lo que necesitas cuando lo necesitas.</em></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Lazy loading:</strong> Cargar contenido solo cuando se necesita</li>",
              "<li><strong>Code splitting:</strong> Dividir JavaScript en chunks peque√±os</li>",
              "<li><strong>Dynamic imports:</strong> Importar m√≥dulos solo cuando se requieren</li>",
              "<li><strong>Route-based splitting:</strong> Cada p√°gina carga solo su c√≥digo</li>",
              "</ul>",
              "<p><strong>Herramientas de medici√≥n y an√°lisis:</strong></p>",
              "<p><em>Como usar profilers para tu backend: herramientas que te muestran exactamente d√≥nde est√°n los problemas.</em></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Lighthouse:</strong> Auditor√≠a completa de performance, SEO y accesibilidad</li>",
              "<li><strong>PageSpeed Insights:</strong> An√°lisis con datos reales de usuarios</li>",
              "<li><strong>Web.dev:</strong> M√©tricas y recomendaciones espec√≠ficas</li>",
              "<li><strong>Chrome DevTools:</strong> Profiling en tiempo real</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-javascript">// Lazy loading de componentes React\nconst LazyComponent = React.lazy(() => import("./Component"));\n\n// Usar con Suspense para loading state\n&lt;Suspense fallback={&lt;div&gt;Cargando...&lt;/div&gt;}&gt;\n  &lt;LazyComponent /&gt;\n&lt;/Suspense&gt;\n\n// Lazy loading de im√°genes HTML\n&lt;img loading="lazy" src="imagen.jpg" alt="descripci√≥n" /&gt;\n\n// Code splitting con dynamic imports\nconst loadModule = async () => {\n  const { heavyFunction } = await import("./heavyModule");\n  return heavyFunction;\n};\n\n// Intersection Observer para lazy loading personalizado\nconst observer = new IntersectionObserver((entries) => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      const img = entry.target;\n      img.src = img.dataset.src; // Cargar imagen real\n      observer.unobserve(img);\n    }\n  });\n});</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "‚öõÔ∏è",
        title: "M√≥dulo 2: React y TypeScript",
        shortTitle: "React + TS",
        objective: "Dominar React con TypeScript para crear interfaces de usuario modernas y mantenibles.",
        completed: false,
        sections: [
          {
            title: "2.1 Introducci√≥n a React: Componentes y Reactividad",
            content: [
              "<p><em>React es una librer√≠a que hace que crear interfaces complejas sea m√°s manejable, dividiendo la UI en piezas peque√±as y reutilizables.</em></p>",
              "<p><strong>Concepto:</strong> Una librer√≠a de JavaScript para construir interfaces de usuario</p>",
              "<p><em>No es un framework completo como NestJS. Es una herramienta espec√≠fica para crear interfaces, como Express es para APIs.</em></p>",
              "<p><strong>JSX:</strong> Sintaxis que permite escribir HTML dentro de JavaScript</p>",
              "<p><em>Es HTML con superpoderes: puedes insertar variables, condiciones y loops directamente. Se compila a JavaScript normal.</em></p>",
              "<p><strong>Componentes:</strong> Peque√±as piezas de UI reutilizables e independientes</p>",
              "<p><em>Como funciones que retornan HTML. Cada bot√≥n, formulario o card puede ser un componente separado.</em></p>",
              "<p><strong>Props (Propiedades):</strong> C√≥mo los datos son pasados de un componente padre a un componente hijo</p>",
              "<p><em>Como par√°metros de funci√≥n. El componente padre env√≠a datos al hijo para que los use.</em></p>",
              "<p><strong>Estado (useState):</strong> Datos que un componente maneja internamente</p>",
              "<p><em>Variables que cuando cambian, React autom√°ticamente actualiza la UI. Como variables reactivas que triggean re-renders.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-jsx">// Componente simple con props\nfunction Welcome({ name, isOnline }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hola, {name}!&lt;/h1&gt;\n      {isOnline && &lt;span&gt;üü¢ En l√≠nea&lt;/span&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// Uso del componente\n&lt;Welcome name="Juan" isOnline={true} /&gt;</code></pre></div>',
            ],
          },
          {
            title: "2.2 TypeScript en Frontend con React",
            content: [
              "<p><em>TypeScript en frontend funciona igual que en backend: previene errores y mejora la experiencia de desarrollo.</em></p>",
              "<p><strong>Concepto:</strong> Un superset de JavaScript que a√±ade tipado est√°tico</p>",
              "<p><em>Exactamente igual que usar TypeScript en Node.js, pero para c√≥digo que se ejecuta en el navegador.</em></p>",
              "<p><strong>¬øPor qu√© TypeScript?</strong> Previene errores, mejora el autocompletado y sirve como documentaci√≥n impl√≠cita</p>",
              "<p><em>Los mismos beneficios que ya conoces del backend: catch de errores en tiempo de desarrollo, mejor IntelliSense.</em></p>",
              "<p><strong>Tipos B√°sicos e Interfaces:</strong> Definici√≥n de interfaces para props, estados y estructuras de datos</p>",
              "<p><em>Como definir tipos para tus DTOs o models, pero para componentes React y datos de la UI.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Interfaces para props\ninterface UserProps {\n  id: number;\n  name: string;\n  email: string;\n  isActive?: boolean; // Opcional\n  onEdit: (userId: number) =&gt; void; // Funci√≥n callback\n}\n\n// Componente tipado\nfunction UserCard({ id, name, email, isActive = false, onEdit }: UserProps) {\n  return (\n    &lt;div className="user-card"&gt;\n      &lt;h3&gt;{name}&lt;/h3&gt;\n      &lt;p&gt;{email}&lt;/p&gt;\n      &lt;span&gt;{isActive ? "Activo" : "Inactivo"}&lt;/span&gt;\n      &lt;button onClick={() =&gt; onEdit(id)}&gt;Editar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
            ],
          },
          {
            title: "2.3 Gesti√≥n del Estado en React",
            content: [
              "<p><em>El estado es informaci√≥n que puede cambiar durante la ejecuci√≥n y que afecta lo que el usuario ve. Como variables en memoria que triggean actualizaciones de UI.</em></p>",
              "<p><strong>Lifting State Up:</strong> Compartir estado entre componentes</p>",
              "<p><em>Cuando dos componentes necesitan los mismos datos, mueves el estado al componente padre com√∫n. Como compartir variables entre funciones.</em></p>",
              "<p><strong>Context API:</strong> Una forma de compartir estados a trav√©s del √°rbol de componentes</p>",
              "<p><em>Como variables globales, pero controladas. Evita pasar props a trav√©s de muchos niveles de componentes.</em></p>",
              "<p><strong>useReducer Hook:</strong> Una alternativa a useState para manejar l√≥gica de estado m√°s compleja</p>",
              "<p><em>Como Redux pero simple. Para cuando el estado tiene l√≥gica compleja de actualizaci√≥n.</em></p>",
              "<p><strong>Librer√≠as de Gesti√≥n de Estado:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Zustand:</strong> Una alternativa m√°s simple y ligera</li>",
              "<li><strong>React Query / Tanstack Query:</strong> Herramienta potente para la gesti√≥n de datos as√≠ncronos (cach√©, sincronizaci√≥n)</li>",
              "</ul>",
              "<p><strong>Gu√≠a de Decisi√≥n R√°pida:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><code>useState</code>: Para estado local de un solo componente</li>",
              "<li>Context API: Para estado global simple</li>",
              "<li>Zustand: Para estado global complejo y compartido</li>",
              "<li>Tanstack Query: Espec√≠ficamente para gestionar datos del servidor</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">import { useState, useEffect, createContext, useContext } from "react";\n\n// useState - Estado local\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n      Count: {count}\n    &lt;/button&gt;\n  );\n}\n\n// Context API - Estado global\nconst UserContext = createContext();\n\nfunction UserProvider({ children }) {\n  const [user, setUser] = useState(null);\n  \n  return (\n    &lt;UserContext.Provider value={{ user, setUser }}&gt;\n      {children}\n    &lt;/UserContext.Provider&gt;\n  );\n}</code></pre></div>',
            ],
          },
          {
            title: "2.4 Hooks de React y Custom Hooks",
            content: [
              '<p><em>Los Hooks son funciones especiales de React que te permiten "enganchar" funcionalidades como estado y ciclo de vida en componentes funcionales. Son como m√©todos utilitarios que React te proporciona.</em></p>',
              "<p><strong>useEffect:</strong> Para manejar efectos secundarios (ej. fetching de datos)</p>",
              "<p><em>Los efectos secundarios son operaciones que no est√°n directamente relacionadas con renderizar la UI, como llamadas a APIs, timers, o suscripciones. useEffect se ejecuta despu√©s de que el componente se renderiza.</em></p>",
              "<p><strong>useRef:</strong> Para acceder a elementos DOM</p>",
              "<p><em>El DOM (Document Object Model) es la representaci√≥n en memoria de los elementos HTML de tu p√°gina. useRef te permite obtener una referencia directa a un elemento HTML espec√≠fico, como hacer focus en un input o medir dimensiones.</em></p>",
              "<p><strong>Custom Hooks:</strong> Funciones que te permiten reutilizar l√≥gica con estado</p>",
              "<p><em>El estado son datos que pueden cambiar durante la vida de un componente (como el valor de un input o si un modal est√° abierto). Los Custom Hooks te permiten extraer esta l√≥gica para reutilizarla en m√∫ltiples componentes.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">import { useState, useEffect, useRef } from "react";\n\n// useEffect para llamadas a API\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    async function fetchUser() {\n      try {\n        const response = await fetch(`/api/users/${userId}`);\n        const userData = await response.json();\n        setUser(userData);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchUser();\n  }, [userId]); // Se ejecuta cuando userId cambia\n\n  return loading ? &lt;div&gt;Cargando...&lt;/div&gt; : &lt;div&gt;{user?.name}&lt;/div&gt;;\n}\n\n// useRef para acceso DOM\nfunction SearchInput() {\n  const inputRef = useRef(null);\n  \n  const focusInput = () =&gt; {\n    inputRef.current?.focus();\n  };\n  \n  return (\n    &lt;div&gt;\n      &lt;input ref={inputRef} type="text" /&gt;\n      &lt;button onClick={focusInput}&gt;Focus&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Custom Hook\nfunction useApi(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() =&gt; {\n    fetch(url)\n      .then(res =&gt; res.json())\n      .then(setData)\n      .catch(setError)\n      .finally(() =&gt; setLoading(false));\n  }, [url]);\n  \n  return { data, loading, error };\n}</code></pre></div>',
              "<p><strong>Hooks Avanzados y Optimizaci√≥n:</strong></p>",
              "<p><strong>‚Ä¢ useMemo:</strong> Para memorizar valores computados costosos</p>",
              "<p><em>Como cachear el resultado de operaciones pesadas. Solo recalcula cuando sus dependencias cambian.</em></p>",
              "<p><strong>‚Ä¢ useCallback:</strong> Para memorizar funciones y evitar re-renders innecesarios</p>",
              "<p><em>√ötil cuando pasas funciones como props a componentes hijos que usan React.memo.</em></p>",
              "<p><strong>‚Ä¢ useReducer:</strong> Para manejar estado complejo con l√≥gica de actualizaci√≥n</p>",
              "<p><em>Como Redux pero integrado. Ideal para estados con m√∫ltiples acciones y transiciones complejas.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Hooks de optimizaci√≥n\nimport { useMemo, useCallback, useReducer } from "react";\n\n// useMemo - Memoriza c√°lculos costosos\nfunction ExpensiveComponent({ items, filter }) {\n  const expensiveValue = useMemo(() =&gt; {\n    console.log("Calculando valor costoso...");\n    return items\n      .filter(item =&gt; item.category === filter)\n      .reduce((sum, item) =&gt; sum + item.price, 0);\n  }, [items, filter]); // Solo recalcula si items o filter cambian\n  \n  return &lt;div&gt;Total: ${expensiveValue}&lt;/div&gt;;\n}\n\n// useCallback - Memoriza funciones\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState("");\n  \n  // Esta funci√≥n se memoriza y no cambia entre renders\n  const handleClick = useCallback(() =&gt; {\n    console.log(`Clicked! Count: ${count}`);\n  }, [count]); // Solo cambia si count cambia\n  \n  return (\n    &lt;div&gt;\n      &lt;input value={name} onChange={(e) =&gt; setName(e.target.value)} /&gt;\n      &lt;MemoizedChild onClick={handleClick} /&gt;\n    &lt;/div&gt;\n  );\n}\n\n// useReducer - Estado complejo\ntype Action = \n  | { type: "LOAD_START" }\n  | { type: "LOAD_SUCCESS", payload: any[] }\n  | { type: "LOAD_ERROR", payload: string }\n  | { type: "RESET" };\n\nfunction dataReducer(state, action: Action) {\n  switch (action.type) {\n    case "LOAD_START":\n      return { ...state, loading: true, error: null };\n    case "LOAD_SUCCESS":\n      return { loading: false, data: action.payload, error: null };\n    case "LOAD_ERROR":\n      return { loading: false, data: [], error: action.payload };\n    case "RESET":\n      return { loading: false, data: [], error: null };\n    default:\n      return state;\n  }\n}\n\nfunction useDataFetcher(url: string) {\n  const [state, dispatch] = useReducer(dataReducer, {\n    loading: false,\n    data: [],\n    error: null\n  });\n  \n  const fetchData = useCallback(async () =&gt; {\n    dispatch({ type: "LOAD_START" });\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      dispatch({ type: "LOAD_SUCCESS", payload: data });\n    } catch (error) {\n      dispatch({ type: "LOAD_ERROR", payload: error.message });\n    }\n  }, [url]);\n  \n  return { ...state, fetchData, reset: () =&gt; dispatch({ type: "RESET" }) };\n}</code></pre></div>',
              "<p><strong>Custom Hooks Avanzados:</strong> Ejemplos pr√°cticos y reutilizables</p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Custom Hook: useLocalStorage\nfunction useLocalStorage&lt;T&gt;(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState&lt;T&gt;(() =&gt; {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key "${key}":`, error);\n      return initialValue;\n    }\n  });\n  \n  const setValue = useCallback((value: T | ((val: T) =&gt; T)) =&gt; {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key "${key}":`, error);\n    }\n  }, [key, storedValue]);\n  \n  return [storedValue, setValue] as const;\n}\n\n// Custom Hook: useDebounce\nfunction useDebounce&lt;T&gt;(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState&lt;T&gt;(value);\n  \n  useEffect(() =&gt; {\n    const handler = setTimeout(() =&gt; {\n      setDebouncedValue(value);\n    }, delay);\n    \n    return () =&gt; {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  \n  return debouncedValue;\n}\n\n// Custom Hook: useForm\nfunction useForm&lt;T extends Record&lt;string, any&gt;&gt;(initialValues: T) {\n  const [values, setValues] = useState&lt;T&gt;(initialValues);\n  const [errors, setErrors] = useState&lt;Partial&lt;Record&lt;keyof T, string&gt;&gt;&gt;({});\n  const [touched, setTouched] = useState&lt;Partial&lt;Record&lt;keyof T, boolean&gt;&gt;&gt;({});\n  \n  const setValue = useCallback((name: keyof T, value: any) =&gt; {\n    setValues(prev =&gt; ({ ...prev, [name]: value }));\n    // Limpiar error al cambiar valor\n    if (errors[name]) {\n      setErrors(prev =&gt; ({ ...prev, [name]: undefined }));\n    }\n  }, [errors]);\n  \n  const setError = useCallback((name: keyof T, error: string) =&gt; {\n    setErrors(prev =&gt; ({ ...prev, [name]: error }));\n  }, []);\n  \n  const setTouched = useCallback((name: keyof T) =&gt; {\n    setTouched(prev =&gt; ({ ...prev, [name]: true }));\n  }, []);\n  \n  const reset = useCallback(() =&gt; {\n    setValues(initialValues);\n    setErrors({});\n    setTouched({});\n  }, [initialValues]);\n  \n  const isValid = useMemo(() =&gt; {\n    return Object.keys(errors).length === 0;\n  }, [errors]);\n  \n  return {\n    values,\n    errors,\n    touched,\n    setValue,\n    setError,\n    setTouched,\n    reset,\n    isValid\n  };\n}</code></pre></div>',
              "<p><strong>Reglas de los Hooks (Importante):</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Solo en el nivel superior:</strong> No usar hooks dentro de bucles, condiciones o funciones anidadas</li>",
              "<li><strong>Solo en componentes React:</strong> O en custom hooks, nunca en funciones regulares de JavaScript</li>",
              "<li><strong>Orden consistente:</strong> Los hooks deben llamarse en el mismo orden en cada render</li>",
              "<li><strong>Dependencias correctas:</strong> Incluir todas las dependencias en useEffect y useCallback</li>",
              "</ul>",
              "<p><strong>Mejores pr√°cticas:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ Usar custom hooks para l√≥gica reutilizable</li>",
              "<li>‚úÖ Memorizar con useMemo/useCallback solo cuando sea necesario</li>",
              "<li>‚úÖ Separar responsabilidades en diferentes hooks</li>",
              "<li>‚úÖ Usar useReducer para estado complejo con m√∫ltiples acciones</li>",
              "<li>‚úÖ Implementar cleanup en useEffect cuando sea necesario</li>",
              "</ul>",
            ],
          },
          {
            title: "2.5 Formularios en React",
            content: [
              "<p><strong>react-hook-form:</strong> Librer√≠a para formularios con rendimiento optimizado</p>",
              "<p><em>Maneja el estado del formulario de forma eficiente, minimizando re-renders y mejorando el performance.</em></p>",
              "<p><strong>zod:</strong> Librer√≠a de validaci√≥n de esquemas</p>",
              "<p><em>Define reglas de validaci√≥n de forma declarativa, similar a como defines esquemas de base de datos.</em></p>",
              "<p><strong>Ventajas de react-hook-form:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>Menos re-renders = mejor performance</li>",
              "<li>API simple y consistente</li>",
              "<li>Validaci√≥n integrada</li>",
              "<li>Soporte para TypeScript</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">import { useForm } from "react-hook-form";\nimport { z } from "zod";\nimport { zodResolver } from "@hookform/resolvers/zod";\n\n// Schema de validaci√≥n con Zod\nconst userSchema = z.object({\n  name: z.string().min(2, "Nombre debe tener al menos 2 caracteres"),\n  email: z.string().email("Email inv√°lido"),\n  age: z.number().min(18, "Debe ser mayor de edad")\n});\n\ntype UserFormData = z.infer&lt;typeof userSchema&gt;;\n\nfunction UserForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset\n  } = useForm&lt;UserFormData&gt;({\n    resolver: zodResolver(userSchema)\n  });\n\n  const onSubmit = async (data: UserFormData) =&gt; {\n    try {\n      const response = await fetch("/api/users", {\n        method: "POST",\n        headers: { "Content-Type": "application/json" },\n        body: JSON.stringify(data)\n      });\n      \n      if (response.ok) {\n        reset(); // Limpiar formulario\n        alert("Usuario creado exitosamente");\n      }\n    } catch (error) {\n      console.error("Error:", error);\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;div&gt;\n        &lt;input\n          {...register("name")}\n          placeholder="Nombre"\n        /&gt;\n        {errors.name && &lt;p&gt;{errors.name.message}&lt;/p&gt;}\n      &lt;/div&gt;\n      \n      &lt;div&gt;\n        &lt;input\n          {...register("email")}\n          type="email"\n          placeholder="Email"\n        /&gt;\n        {errors.email && &lt;p&gt;{errors.email.message}&lt;/p&gt;}\n      &lt;/div&gt;\n      \n      &lt;div&gt;\n        &lt;input\n          {...register("age", { valueAsNumber: true })}\n          type="number"\n          placeholder="Edad"\n        /&gt;\n        {errors.age && &lt;p&gt;{errors.age.message}&lt;/p&gt;}\n      &lt;/div&gt;\n      \n      &lt;button type="submit" disabled={isSubmitting}&gt;\n        {isSubmitting ? "Guardando..." : "Guardar"}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  );\n}</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "üé®",
        title: "M√≥dulo 3: Tailwind CSS",
        shortTitle: "Tailwind",
        objective: "Implementar dise√±os responsivos y consistentes usando el enfoque utility-first de Tailwind CSS.",
        completed: false,
        sections: [
          {
            title: "3.1 Introducci√≥n a Tailwind CSS",
            content: [
              "<p><em>Tailwind es un framework de CSS que proporciona clases utilitarias prehechas, como tener un toolkit de funciones CSS listas para usar.</em></p>",
              '<p><strong>Concepto:</strong> Un framework CSS "utility-first" que proporciona clases predefinidas</p>',
              "<p><em>En lugar de escribir CSS personalizado, usas clases como `text-red-500` o `p-4`. Como usar librer√≠as en lugar de escribir todo desde cero.</em></p>",
              "<p><strong>¬øPor qu√© Tailwind?</strong> Rapidez de desarrollo, consistencia y optimizaci√≥n</p>",
              "<p><em>No tienes que inventar nombres de clases, los estilos son consistentes, y se optimiza autom√°ticamente removiendo CSS no usado.</em></p>",
              '<p><strong>Principios "Utility-First":</strong> C√≥mo se aplican los estilos componiendo clases</p>',
              "<p><em>Combinas m√∫ltiples clases peque√±as para lograr el dise√±o deseado. Como usar funciones puras que combinan para crear comportamiento complejo.</em></p>",
              "<p><strong>Configuraci√≥n (tailwind.config.js):</strong> Personalizar el tema</p>",
              "<p><em>Como el archivo de configuraci√≥n de tu aplicaci√≥n: defines colores, espaciados y breakpoints personalizados.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-html">&lt;!-- Ejemplo: Card con Tailwind --&gt;\n&lt;div class="flex items-center justify-between p-4 bg-white rounded-lg shadow-md"&gt;\n  &lt;h2 class="text-xl font-bold text-gray-800"&gt;T√≠tulo&lt;/h2&gt;\n  &lt;button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"&gt;\n    Acci√≥n\n  &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;!-- Sin Tailwind necesitar√≠as escribir CSS personalizado --&gt;\n&lt;!-- Con Tailwind, cada clase hace una cosa espec√≠fica --&gt;</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-javascript">// tailwind.config.js - Configuraci√≥n personalizada\nmodule.exports = {\n  content: ["./src/**/*.{js,ts,jsx,tsx}"],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: "#eff6ff",\n          500: "#3b82f6",\n          600: "#2563eb",\n          700: "#1d4ed8"\n        },\n        brand: {\n          light: "#f3f4f6",\n          dark: "#1f2937"\n        }\n      },\n      spacing: {\n        "18": "4.5rem",\n        "88": "22rem"\n      }\n    }\n  },\n  plugins: []\n}</code></pre></div>',
            ],
          },
          {
            title: "3.2 Aplicando Estilos y Responsive Design con Tailwind",
            content: [
              "<p><em>Las clases de Tailwind son como comandos espec√≠ficos: cada una hace una cosa espec√≠fica y las combinas para lograr el resultado deseado.</em></p>",
              "<p><strong>Clases de Utilidad:</strong> Layout (Flexbox, Grid), espaciado, bordes, tipograf√≠a, colores</p>",
              "<p><em>Cada clase hace una cosa: `p-4` agrega padding, `text-lg` aumenta el tama√±o del texto. Como funciones puras.</em></p>",
              "<p><strong>Categor√≠as principales de clases:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Layout:</strong> `flex`, `grid`, `block`, `inline-block`</li>",
              "<li><strong>Espaciado:</strong> `p-4` (padding), `m-2` (margin), `gap-4`</li>",
              "<li><strong>Tipograf√≠a:</strong> `text-lg`, `font-bold`, `text-center`</li>",
              "<li><strong>Colores:</strong> `bg-blue-500`, `text-white`, `border-gray-300`</li>",
              "<li><strong>Efectos:</strong> `shadow-md`, `rounded-lg`, `opacity-75`</li>",
              "</ul>",
              "<p><strong>Dise√±o Responsivo en Tailwind:</strong> Uso de prefijos de breakpoints</p>",
              '<p><em>Aplicas estilos diferentes seg√∫n el tama√±o de pantalla. `md:text-lg` significa "texto grande solo en pantallas medianas o mayores".</em></p>',
              "<p><strong>Breakpoints de Tailwind:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><code>sm:</code> 640px y mayor</li>",
              "<li><code>md:</code> 768px y mayor</li>",
              "<li><code>lg:</code> 1024px y mayor</li>",
              "<li><code>xl:</code> 1280px y mayor</li>",
              "<li><code>2xl:</code> 1536px y mayor</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-html">&lt;!-- Grid responsivo --&gt;\n&lt;div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"&gt;\n  &lt;!-- 1 columna m√≥vil, 2 tablet, 3 desktop --&gt;\n  &lt;div class="p-4 bg-white rounded shadow"&gt;Card 1&lt;/div&gt;\n  &lt;div class="p-4 bg-white rounded shadow"&gt;Card 2&lt;/div&gt;\n  &lt;div class="p-4 bg-white rounded shadow"&gt;Card 3&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;!-- Texto responsivo --&gt;\n&lt;h1 class="text-2xl md:text-4xl lg:text-6xl font-bold text-center"&gt;\n  T√≠tulo que crece con la pantalla\n&lt;/h1&gt;\n\n&lt;!-- Navegaci√≥n responsiva --&gt;\n&lt;nav class="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-4"&gt;\n  &lt;a href="#" class="block px-4 py-2 hover:bg-gray-100"&gt;Inicio&lt;/a&gt;\n  &lt;a href="#" class="block px-4 py-2 hover:bg-gray-100"&gt;Productos&lt;/a&gt;\n  &lt;a href="#" class="block px-4 py-2 hover:bg-gray-100"&gt;Contacto&lt;/a&gt;\n&lt;/nav&gt;</code></pre></div>',
            ],
          },
          {
            title: "3.3 Componentes Reutilizables con Tailwind",
            content: [
              "<p><strong>Componentes Reutilizables con Tailwind:</strong> C√≥mo agrupar clases de Tailwind dentro de componentes de React</p>",
              "<p><em>Creas componentes React que internamente usan clases Tailwind, para no repetir las mismas combinaciones de clases.</em></p>",
              "<p><strong>Patrones de componentes comunes:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Buttons:</strong> Variantes de botones con diferentes estilos</li>",
              "<li><strong>Cards:</strong> Contenedores de contenido reutilizables</li>",
              "<li><strong>Form Elements:</strong> Inputs, selects consistentes</li>",
              "<li><strong>Layout Components:</strong> Headers, sidebars, containers</li>",
              "</ul>",
              "<p><strong>Usando @apply en CSS (cuando es necesario):</strong></p>",
              "<p><em>Para casos donde necesitas crear clases personalizadas que reutilicen utilidades de Tailwind.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Componente Button reutilizable\ninterface ButtonProps {\n  variant: "primary" | "secondary" | "danger";\n  size: "sm" | "md" | "lg";\n  children: React.ReactNode;\n  onClick?: () => void;\n  disabled?: boolean;\n}\n\nfunction Button({ variant, size, children, onClick, disabled }: ButtonProps) {\n  const baseClasses = "font-medium rounded focus:outline-none focus:ring-2 transition-colors";\n  \n  const variantClasses = {\n    primary: "bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500",\n    secondary: "bg-gray-200 hover:bg-gray-300 text-gray-900 focus:ring-gray-500",\n    danger: "bg-red-600 hover:bg-red-700 text-white focus:ring-red-500"\n  };\n  \n  const sizeClasses = {\n    sm: "px-3 py-1.5 text-sm",\n    md: "px-4 py-2",\n    lg: "px-6 py-3 text-lg"\n  };\n  \n  const disabledClasses = disabled ? "opacity-50 cursor-not-allowed" : "";\n  \n  return (\n    &lt;button\n      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${disabledClasses}`}\n      onClick={onClick}\n      disabled={disabled}\n    &gt;\n      {children}\n    &lt;/button&gt;\n  );\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Card component reutilizable\ninterface CardProps {\n  title?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nfunction Card({ title, children, className = "" }: CardProps) {\n  return (\n    &lt;div className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`}&gt;\n      {title && (\n        &lt;div className="px-6 py-4 border-b border-gray-200"&gt;\n          &lt;h3 className="text-lg font-semibold text-gray-900"&gt;{title}&lt;/h3&gt;\n        &lt;/div&gt;\n      )}\n      &lt;div className="p-6"&gt;\n        {children}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Uso de los componentes\nfunction App() {\n  return (\n    &lt;div className="max-w-4xl mx-auto p-6 space-y-6"&gt;\n      &lt;Card title="Usuario"&gt;\n        &lt;p className="text-gray-600 mb-4"&gt;Informaci√≥n del usuario&lt;/p&gt;\n        &lt;div className="flex space-x-3"&gt;\n          &lt;Button variant="primary" size="md"&gt;Guardar&lt;/Button&gt;\n          &lt;Button variant="secondary" size="md"&gt;Cancelar&lt;/Button&gt;\n        &lt;/div&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-css">/* styles/globals.css - Usando @apply cuando es necesario */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Componente personalizado con @apply */\n.btn-primary {\n  @apply px-4 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors;\n}\n\n/* √ötil para casos donde necesitas la clase en HTML puro */\n&lt;button class="btn-primary"&gt;Click me&lt;/button&gt;</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "üöÄ",
        title: "M√≥dulo 4: Next.js",
        shortTitle: "Next.js",
        objective:
          "Implementar aplicaciones React de producci√≥n con Next.js, incluyendo SSR, SSG y optimizaciones autom√°ticas.",
        completed: false,
        sections: [
          {
            title: "4.1 Introducci√≥n a Next.js",
            content: [
              "<p><em>Next.js es a React lo que NestJS es a Node.js: un framework que agrega estructura, herramientas y mejores pr√°cticas sobre la librer√≠a base.</em></p>",
              "<p><strong>Concepto:</strong> Un meta-framework de React que a√±ade funcionalidades para la producci√≥n</p>",
              "<p><em>React por s√≠ solo es solo una librer√≠a de UI. Next.js agrega routing, optimizaciones, server-side rendering y tooling.</em></p>",
              "<p><strong>¬øPor qu√© Next.js?</strong> Mejora el rendimiento, el SEO y la experiencia de desarrollador</p>",
              "<p><em>Como usar Express con middlewares vs Node.js puro. Next.js resuelve problemas comunes del desarrollo React.</em></p>",
              '<p><strong>Arquitectura de Next.js:</strong> El sistema de "App Router"</p>',
              "<p><em>La nueva forma de manejar rutas en Next.js. Basado en carpetas y archivos, como las rutas en Express pero autom√°ticas.</em></p>",
              "<p><strong>Ventajas principales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>Routing autom√°tico basado en archivos</li>",
              "<li>Optimizaciones de performance autom√°ticas</li>",
              "<li>Soporte para m√∫ltiples estrategias de rendering</li>",
              "<li>API Routes integradas</li>",
              "<li>Optimizaci√≥n autom√°tica de im√°genes</li>",
              "<li>Code splitting autom√°tico</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-bash"># Crear un nuevo proyecto Next.js\nnpx create-next-app@latest mi-app\ncd mi-app\nnpm run dev\n\n# Estructura b√°sica generada:\nmi-app/\n‚îú‚îÄ‚îÄ src/app/          # App Router (nuevo)\n‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx    # Layout ra√≠z\n‚îÇ   ‚îî‚îÄ‚îÄ page.tsx      # P√°gina principal\n‚îú‚îÄ‚îÄ public/           # Archivos est√°ticos\n‚îú‚îÄ‚îÄ next.config.js    # Configuraci√≥n de Next.js\n‚îî‚îÄ‚îÄ package.json</code></pre></div>',
            ],
          },
          {
            title: "4.2 Tipos de Renderizado en Next.js (Concepto Clave)",
            content: [
              "<p><em>Como en backend puedes cachear respuestas o generar contenido din√°mico, Next.js te permite elegir c√≥mo y d√≥nde se genera el HTML.</em></p>",
              "<p><strong>Client-Side Rendering (CSR):</strong> El navegador renderiza la p√°gina</p>",
              "<p><em>Como una SPA tradicional. El servidor env√≠a JavaScript y el navegador construye la p√°gina. M√°s interactivo pero m√°s lento inicialmente.</em></p>",
              "<p><strong>Server-Side Rendering (SSR):</strong> Los componentes se renderizan en el servidor</p>",
              "<p><em>El servidor genera el HTML completo antes de enviarlo. Como generar un reporte PDF en el servidor antes de enviarlo.</em></p>",
              '<p><strong>Static Site Generation (SSG):</strong> El sitio se pre-renderiza a HTML est√°tico en el momento del "build"</p>',
              "<p><em>Como compilar tu aplicaci√≥n. Las p√°ginas se generan una vez durante el deploy y se sirven como archivos est√°ticos.</em></p>",
              "<p><strong>Incremental Static Regeneration (ISR):</strong> Permite que p√°ginas est√°ticas se regeneren</p>",
              "<p><em>Como cache con TTL. Las p√°ginas est√°ticas se regeneran en background cuando expiran.</em></p>",
              "<p><strong>Server Components vs. Client Components:</strong> Entender qu√© se ejecuta en el servidor y qu√© en el cliente</p>",
              "<p><em>Server Components se ejecutan en el servidor (como tus controllers), Client Components en el navegador (como JavaScript tradicional).</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Server Component (por defecto en App Router)\n// Se ejecuta en el servidor, puede acceder a bases de datos directamente\nexport default async function ProductsPage() {\n  // Esto se ejecuta en el servidor\n  const products = await fetch("https://api.example.com/products");\n  const data = await products.json();\n  \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Productos&lt;/h1&gt;\n      {data.map(product =&gt; (\n        &lt;div key={product.id}&gt;{product.name}&lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\n// Client Component - necesita "use client"\n// Se ejecuta en el navegador, puede usar hooks y eventos\n"use client";\nimport { useState, useEffect } from "react";\n\nexport default function InteractiveCounter() {\n  const [count, setCount] = useState(0);\n  const [data, setData] = useState(null);\n  \n  useEffect(() =&gt; {\n    // Esto se ejecuta en el browser\n    fetch("/api/data").then(res =&gt; res.json()).then(setData);\n  }, []);\n  \n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Clicks: {count}\n      &lt;/button&gt;\n      &lt;p&gt;{data?.message}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Estrategias de rendering por tipo de p√°gina\n\n// SSG - P√°ginas est√°ticas (ej: blog posts, docs)\nexport default async function StaticPage() {\n  const posts = await getBlogPosts(); // Se ejecuta en build time\n  return &lt;div&gt;{posts.map(post =&gt; &lt;Article key={post.id} {...post} /&gt;)}&lt;/div&gt;;\n}\n\n// SSR - P√°ginas din√°micas (ej: dashboard de usuario)\nexport default async function DynamicPage() {\n  const user = await getCurrentUser(); // Se ejecuta en cada request\n  return &lt;div&gt;Welcome, {user.name}&lt;/div&gt;;\n}\n\n// ISR - P√°ginas que cambian ocasionalmente\nexport const revalidate = 3600; // Regenerar cada hora\nexport default async function ISRPage() {\n  const data = await getUpdatedData();\n  return &lt;div&gt;{data.content}&lt;/div&gt;;\n}</code></pre></div>',
            ],
          },
          {
            title: "4.3 Enrutamiento en Next.js (App Router)",
            content: [
              "<p><em>Como Express define rutas con `app.get('/users', handler)`, Next.js define rutas con carpetas y archivos.</em></p>",
              "<p><strong>Concepto:</strong> El sistema de rutas basado en la estructura de directorios</p>",
              "<p><em>Cada carpeta en `src/app` es una ruta. `/users` se crea poniendo un archivo `page.tsx` en la carpeta `src/app/users`.</em></p>",
              "<p><strong>Rutas Din√°micas:</strong> Creaci√≥n de URLs personalizadas</p>",
              "<p><em>Como `/:id` en Express. En Next.js usas `[id]` como nombre de carpeta para crear rutas con par√°metros.</em></p>",
              "<p><strong>Layouts:</strong> Compartir UI entre m√∫ltiples rutas</p>",
              "<p><em>Como middlewares que se ejecutan en m√∫ltiples rutas, pero para UI. Headers, sidebars que se mantienen entre p√°ginas.</em></p>",
              "<p><strong>Loading UI y Error Handling:</strong> C√≥mo manejar los estados de carga y errores</p>",
              "<p><em>Archivos especiales `loading.tsx` y `error.tsx` que Next.js muestra autom√°ticamente durante cargas o errores.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="text-green-400">src/app/\n‚îú‚îÄ‚îÄ layout.tsx          # Layout ra√≠z para toda la app\n‚îú‚îÄ‚îÄ page.tsx           # P√°gina home (/)\n‚îú‚îÄ‚îÄ loading.tsx        # Loading UI global\n‚îú‚îÄ‚îÄ error.tsx          # Error UI global\n‚îú‚îÄ‚îÄ not-found.tsx      # P√°gina 404 personalizada\n‚îú‚îÄ‚îÄ about/\n‚îÇ   ‚îî‚îÄ‚îÄ page.tsx       # P√°gina about (/about)\n‚îú‚îÄ‚îÄ blog/\n‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx     # Layout espec√≠fico para blog\n‚îÇ   ‚îú‚îÄ‚îÄ page.tsx       # Lista de posts (/blog)\n‚îÇ   ‚îú‚îÄ‚îÄ loading.tsx    # Loading para blog\n‚îÇ   ‚îî‚îÄ‚îÄ [slug]/\n‚îÇ       ‚îî‚îÄ‚îÄ page.tsx   # Post espec√≠fico (/blog/mi-post)\n‚îú‚îÄ‚îÄ users/\n‚îÇ   ‚îú‚îÄ‚îÄ page.tsx       # Lista usuarios (/users)\n‚îÇ   ‚îî‚îÄ‚îÄ [id]/\n‚îÇ       ‚îú‚îÄ‚îÄ page.tsx   # Perfil usuario (/users/123)\n‚îÇ       ‚îî‚îÄ‚îÄ edit/\n‚îÇ           ‚îî‚îÄ‚îÄ page.tsx # Editar usuario (/users/123/edit)\n‚îî‚îÄ‚îÄ dashboard/\n    ‚îú‚îÄ‚îÄ layout.tsx     # Layout del dashboard\n    ‚îú‚îÄ‚îÄ page.tsx       # Dashboard principal (/dashboard)\n    ‚îú‚îÄ‚îÄ analytics/\n    ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx   # Analytics (/dashboard/analytics)\n    ‚îî‚îÄ‚îÄ settings/\n        ‚îî‚îÄ‚îÄ page.tsx   # Settings (/dashboard/settings)</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// src/app/layout.tsx - Layout ra√≠z\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    &lt;html lang="es"&gt;\n      &lt;body&gt;\n        &lt;header&gt;\n          &lt;nav&gt;Navegaci√≥n Global&lt;/nav&gt;\n        &lt;/header&gt;\n        &lt;main&gt;{children}&lt;/main&gt;\n        &lt;footer&gt;Footer Global&lt;/footer&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n\n// src/app/blog/[slug]/page.tsx - P√°gina din√°mica\ninterface Params {\n  slug: string;\n}\n\nexport default async function BlogPost({ params }: { params: Params }) {\n  const { slug } = params;\n  const post = await getBlogPost(slug);\n  \n  if (!post) {\n    notFound(); // Redirige a 404\n  }\n  \n  return (\n    &lt;article&gt;\n      &lt;h1&gt;{post.title}&lt;/h1&gt;\n      &lt;p&gt;{post.content}&lt;/p&gt;\n    &lt;/article&gt;\n  );\n}\n\n// src/app/blog/loading.tsx - Loading UI\nexport default function Loading() {\n  return &lt;div&gt;Cargando post...&lt;/div&gt;;\n}\n\n// src/app/blog/error.tsx - Error UI\n"use client";\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string };\n  reset: () =&gt; void;\n}) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Algo sali√≥ mal!&lt;/h2&gt;\n      &lt;p&gt;{error.message}&lt;/p&gt;\n      &lt;button onClick={reset}&gt;Intentar de nuevo&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
            ],
          },
          {
            title: "4.4 Carga de Datos y API Routes",
            content: [
              "<p><em>Next.js puede actuar como cliente (consumiendo tu API) y tambi√©n como servidor (proporcionando endpoints adicionales).</em></p>",
              "<p><strong>Data Fetching en Next.js:</strong> Uso de la API fetch con optimizaciones y cach√© integradas</p>",
              "<p><em>Como hacer peticiones HTTP desde tu backend a otros servicios, pero desde Next.js hacia tu API. Con cache autom√°tico.</em></p>",
              "<p><strong>API Routes (Route Handlers):</strong> Creaci√≥n de endpoints de backend directamente dentro de tu proyecto Next.js</p>",
              "<p><em>Como tener controllers de Express dentro de tu proyecto frontend. √ötil para proxies o l√≥gica simple.</em></p>",
              "<p><strong>Estrategias de caching:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>force-cache:</strong> Cachea la respuesta indefinidamente</li>",
              "<li><strong>no-store:</strong> Nunca cachea, siempre fresh data</li>",
              "<li><strong>revalidate:</strong> Cachea por un tiempo espec√≠fico</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// src/app/api/users/route.ts - API Route\nimport { NextRequest, NextResponse } from "next/server";\n\n// GET /api/users\nexport async function GET() {\n  try {\n    // Como un controller en Express\n    const users = await getUsersFromDatabase();\n    return NextResponse.json(users);\n  } catch (error) {\n    return NextResponse.json(\n      { error: "Error al obtener usuarios" },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/users\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const newUser = await createUser(body);\n    return NextResponse.json(newUser, { status: 201 });\n  } catch (error) {\n    return NextResponse.json(\n      { error: "Error al crear usuario" },\n      { status: 400 }\n    );\n  }\n}\n\n// src/app/api/users/[id]/route.ts - Ruta din√°mica\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n  const user = await getUserById(id);\n  \n  if (!user) {\n    return NextResponse.json(\n      { error: "Usuario no encontrado" },\n      { status: 404 }\n    );\n  }\n  \n  return NextResponse.json(user);\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n  const body = await request.json();\n  const updatedUser = await updateUser(id, body);\n  return NextResponse.json(updatedUser);\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n  await deleteUser(id);\n  return NextResponse.json({ success: true });\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Data fetching en Server Components\n\n// Fetch con cache (por defecto)\nexport default async function ProductsPage() {\n  const products = await fetch("https://api.example.com/products"); // Cacheado\n  const data = await products.json();\n  return &lt;ProductList products={data} /&gt;;\n}\n\n// Fetch sin cache\nexport default async function LiveDataPage() {\n  const data = await fetch("https://api.example.com/live-data", {\n    cache: "no-store" // Siempre fresh\n  });\n  const result = await data.json();\n  return &lt;LiveComponent data={result} /&gt;;\n}\n\n// Fetch con revalidaci√≥n\nexport default async function NewsPage() {\n  const news = await fetch("https://api.example.com/news", {\n    next: { revalidate: 60 } // Re-fetch cada 60 segundos\n  });\n  const articles = await news.json();\n  return &lt;NewsList articles={articles} /&gt;;\n}\n\n// Fetch paralelo para m√∫ltiples fuentes\nexport default async function DashboardPage() {\n  const [users, orders, analytics] = await Promise.all([\n    fetch("https://api.example.com/users").then(res =&gt; res.json()),\n    fetch("https://api.example.com/orders").then(res =&gt; res.json()),\n    fetch("https://api.example.com/analytics").then(res =&gt; res.json())\n  ]);\n  \n  return (\n    &lt;div&gt;\n      &lt;UsersWidget data={users} /&gt;\n      &lt;OrdersWidget data={orders} /&gt;\n      &lt;AnalyticsWidget data={analytics} /&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
            ],
          },
          {
            title: "4.5 Optimizaci√≥n y Despliegue con Next.js",
            content: [
              "<p><strong>Optimizaci√≥n Autom√°tica:</strong> Im√°genes (next/image), carga diferida (lazy loading)</p>",
              "<p><em>Next.js optimiza autom√°ticamente las im√°genes: las redimensiona, las convierte a formatos modernos, y las carga solo cuando son visibles.</em></p>",
              "<p><strong>Code Splitting:</strong> Divisi√≥n autom√°tica del c√≥digo JavaScript</p>",
              "<p><em>Cada p√°gina solo carga el JavaScript que necesita, no todo el bundle de la aplicaci√≥n.</em></p>",
              "<p><strong>Despliegue con Vercel:</strong> Integraci√≥n fluida y sencilla</p>",
              "<p><em>Vercel (la empresa detr√°s de Next.js) proporciona deployment autom√°tico desde Git, como Heroku pero optimizado para Next.js.</em></p>",
              "<p><strong>Variables de entorno y configuraci√≥n de producci√≥n:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>Variables p√∫blicas: <code>NEXT_PUBLIC_API_URL</code></li>",
              "<li>Variables privadas: <code>DATABASE_URL</code> (solo servidor)</li>",
              "<li>Configuraci√≥n en <code>next.config.js</code></li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Optimizaci√≥n de im√°genes con next/image\nimport Image from "next/image";\n\nfunction ProductCard({ product }) {\n  return (\n    &lt;div className="product-card"&gt;\n      {/* Next.js optimiza autom√°ticamente esta imagen */}\n      &lt;Image\n        src={product.imageUrl}\n        alt={product.name}\n        width={300}\n        height={200}\n        placeholder="blur" // Muestra blur mientras carga\n        priority={product.featured} // Carga prioritaria para im√°genes importantes\n      /&gt;\n      &lt;h3&gt;{product.name}&lt;/h3&gt;\n      &lt;p&gt;${product.price}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Carga diferida de componentes\nimport dynamic from "next/dynamic";\n\n// Este componente solo se carga cuando es necesario\nconst HeavyChart = dynamic(() =&gt; import("./HeavyChart"), {\n  loading: () =&gt; &lt;p&gt;Cargando gr√°fico...&lt;/p&gt;,\n  ssr: false // No renderizar en el servidor\n});\n\nfunction Dashboard() {\n  const [showChart, setShowChart] = useState(false);\n  \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\n      &lt;button onClick={() =&gt; setShowChart(true)}&gt;\n        Mostrar Gr√°fico\n      &lt;/button&gt;\n      {showChart && &lt;HeavyChart /&gt;}\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-javascript">// next.config.js - Configuraci√≥n de Next.js\n/** @type {import("next").NextConfig} */\nconst nextConfig = {\n  // Configuraci√≥n de im√°genes\n  images: {\n    domains: ["api.example.com", "cdn.example.com"],\n    formats: ["image/webp", "image/avif"]\n  },\n  \n  // Variables de entorno\n  env: {\n    CUSTOM_KEY: process.env.CUSTOM_KEY,\n  },\n  \n  // Redirecciones\n  async redirects() {\n    return [\n      {\n        source: "/old-path",\n        destination: "/new-path",\n        permanent: true,\n      },\n    ];\n  },\n  \n  // Headers de seguridad\n  async headers() {\n    return [\n      {\n        source: "/api/:path*",\n        headers: [\n          {\n            key: "Access-Control-Allow-Origin",\n            value: "https://myapp.com",\n          },\n        ],\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-bash"># Despliegue en Vercel\n# 1. Instalar Vercel CLI\nnpm i -g vercel\n\n# 2. Deploy desde terminal\nvercel\n\n# 3. O conectar repositorio en vercel.com\n# - Push a GitHub/GitLab\n# - Auto-deploy en cada commit\n\n# Variables de entorno en producci√≥n:\n# .env.local (desarrollo)\nNEXT_PUBLIC_API_URL=http://localhost:3001/api\nDATABASE_URL=postgresql://localhost:5432/mydb\nJWT_SECRET=dev-secret\n\n# En Vercel dashboard:\n# NEXT_PUBLIC_API_URL=https://api.myapp.com/api\n# DATABASE_URL=postgresql://prod-db-url\n# JWT_SECRET=prod-secret</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "üîó",
        title: "M√≥dulo 5: Conectando Frontend y Backend",
        shortTitle: "Frontend ‚Üî Backend",
        objective:
          "Integrar frontend con APIs backend, manejo de autenticaci√≥n, CORS y buenas pr√°cticas de comunicaci√≥n.",
        completed: false,
        sections: [
          {
            title: "5.1 Dise√±o de APIs desde la Perspectiva Frontend",
            content: [
              "<p><em>Como cliente de tu propia API, entender√°s mejor qu√© hace que una API sea f√°cil o dif√≠cil de consumir desde el frontend.</em></p>",
              "<p><strong>APIs RESTful:</strong> Reafirmar los principios y las mejores pr√°cticas</p>",
              "<p><em>Los mismos conceptos que ya conoces, pero ahora los ver√°s desde el lado del consumidor. URLs intuitivas, m√©todos HTTP correctos.</em></p>",
              "<p><strong>Formato de Datos (JSON):</strong> Comunicaci√≥n est√°ndar entre frontend y backend</p>",
              "<p><em>El mismo JSON que generas en tu backend es lo que consume el frontend. Importante mantener contratos de datos consistentes.</em></p>",
              "<p><strong>Manejo de Errores desde el Backend:</strong> Dise√±ar respuestas de error consistentes</p>",
              "<p><em>El frontend necesita saber qu√© error ocurri√≥ y c√≥mo mostrarlo al usuario. C√≥digos de estado y mensajes claros son cruciales.</em></p>",
              "<p><strong>Buenas pr√°cticas para APIs consumibles:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Endpoints consistentes:</strong> GET /api/users, POST /api/users, PUT /api/users/:id</li>",
              "<li><strong>Respuestas estructuradas:</strong> Formato consistente para datos y errores</li>",
              "<li><strong>Paginaci√≥n:</strong> Para listas grandes de datos</li>",
              "<li><strong>Filtros y b√∫squeda:</strong> Query parameters claros</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Estructura de respuesta consistente del backend\ninterface ApiResponse&lt;T&gt; {\n  success: boolean;\n  data?: T;\n  error?: {\n    message: string;\n    code: string;\n    details?: any;\n  };\n  pagination?: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n}\n\n// Ejemplos de endpoints bien dise√±ados\n// GET /api/users?page=1&limit=10&search=john\n// POST /api/users\n// GET /api/users/123\n// PUT /api/users/123\n// DELETE /api/users/123\n\n// Respuesta de √©xito\n{\n  "success": true,\n  "data": {\n    "id": 1,\n    "name": "John Doe",\n    "email": "john@example.com"\n  }\n}\n\n// Respuesta de error\n{\n  "success": false,\n  "error": {\n    "message": "Usuario no encontrado",\n    "code": "USER_NOT_FOUND",\n    "details": { "userId": 123 }\n  }\n}</code></pre></div>',
            ],
          },
          {
            title: "5.2 Autenticaci√≥n y Autorizaci√≥n",
            content: [
              "<p><em>Los mismos conceptos de auth que manejas en backend, pero desde la perspectiva de c√≥mo el frontend los consume y almacena.</em></p>",
              "<p><strong>Flujos Comunes:</strong> Autenticaci√≥n basada en tokens (JWT)</p>",
              "<p><em>El mismo flujo: login ‚Üí backend retorna token ‚Üí frontend lo guarda ‚Üí frontend lo env√≠a en cada petici√≥n.</em></p>",
              "<p><strong>Almacenamiento Seguro de Credenciales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>Cookies (HttpOnly, Secure):</strong> Opci√≥n recomendada<br><em>El browser maneja las cookies autom√°ticamente. HttpOnly previene acceso desde JavaScript, m√°s seguro.</em></li>",
              "<li><strong>localStorage:</strong> Menos seguro<br><em>Como variables globales en el browser. F√°cil de usar pero accesible desde JavaScript, vulnerable a XSS.</em></li>",
              "</ul>",
              "<p><strong>Implementaci√≥n de autenticaci√≥n:</strong></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/auth.ts - Manejo de autenticaci√≥n\ninterface LoginResponse {\n  success: boolean;\n  token?: string;\n  user?: User;\n  error?: string;\n}\n\n// Funci√≥n de login\nexport async function login(email: string, password: string): Promise&lt;LoginResponse&gt; {\n  try {\n    const response = await fetch("/api/auth/login", {\n      method: "POST",\n      headers: { "Content-Type": "application/json" },\n      body: JSON.stringify({ email, password }),\n      credentials: "include" // Importante para cookies\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok) {\n      // Token se guarda autom√°ticamente como HttpOnly cookie\n      return { success: true, user: data.user };\n    } else {\n      return { success: false, error: data.error?.message };\n    }\n  } catch (error) {\n    return { success: false, error: "Error de conexi√≥n" };\n  }\n}\n\n// Hook personalizado para autenticaci√≥n\nfunction useAuth() {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() =&gt; {\n    // Verificar si el usuario est√° autenticado\n    checkAuth();\n  }, []);\n  \n  const checkAuth = async () =&gt; {\n    try {\n      const response = await fetch("/api/auth/me", {\n        credentials: "include" // Env√≠a cookies autom√°ticamente\n      });\n      \n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      }\n    } catch (error) {\n      console.error("Error verificando auth:", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const logout = async () =&gt; {\n    await fetch("/api/auth/logout", {\n      method: "POST",\n      credentials: "include"\n    });\n    setUser(null);\n  };\n  \n  return { user, loading, login, logout, checkAuth };\n}</code></pre></div>',
            ],
          },
          {
            title: "5.3 Variables de Entorno y CORS",
            content: [
              "<p><em>Los mismos conceptos de configuraci√≥n que usas en backend, pero adaptados para el entorno del frontend.</em></p>",
              "<p><strong>Variables de Entorno en Frontend:</strong> Gestionar URLs de API, claves p√∫blicas, etc., de forma segura</p>",
              "<p><em>Como process.env en Node.js, pero para el browser. Solo variables p√∫blicas (que empiecen con NEXT_PUBLIC_) se incluyen en el build.</em></p>",
              "<p><strong>CORS:</strong> Entender y resolver problemas de seguridad cuando el frontend y el backend est√°n en dominios diferentes</p>",
              "<p><em>El error que ya conoces del backend, pero ahora lo enfrentas como cliente. El browser bloquea peticiones cross-origin por seguridad.</em></p>",
              "<p><strong>Configuraci√≥n de variables de entorno:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>P√∫blicas:</strong> <code>NEXT_PUBLIC_API_URL</code> - Accesibles desde el cliente</li>",
              "<li><strong>Privadas:</strong> <code>API_SECRET_KEY</code> - Solo en servidor/build</li>",
              "<li><strong>Por entorno:</strong> .env.local, .env.development, .env.production</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-bash"># .env.local (desarrollo)\nNEXT_PUBLIC_API_URL=http://localhost:3001/api\nNEXT_PUBLIC_APP_NAME=Mi App Local\nAPI_SECRET_KEY=dev-secret-123\nDATABASE_URL=postgresql://localhost:5432/mydb\n\n# .env.production\nNEXT_PUBLIC_API_URL=https://api.miapp.com/api\nNEXT_PUBLIC_APP_NAME=Mi App\nAPI_SECRET_KEY=prod-secret-xyz\nDATABASE_URL=postgresql://prod-db/mydb</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/config.ts - Configuraci√≥n centralizada\nexport const config = {\n  apiUrl: process.env.NEXT_PUBLIC_API_URL!,\n  appName: process.env.NEXT_PUBLIC_APP_NAME!,\n  isProd: process.env.NODE_ENV === "production",\n  isDev: process.env.NODE_ENV === "development"\n};\n\n// Validar variables requeridas\nif (!config.apiUrl) {\n  throw new Error("NEXT_PUBLIC_API_URL es requerida");\n}\n\n// lib/api.ts - Cliente API centralizado\nclass ApiClient {\n  private baseUrl: string;\n  \n  constructor() {\n    this.baseUrl = config.apiUrl;\n  }\n  \n  async request&lt;T&gt;(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise&lt;ApiResponse&lt;T&gt;&gt; {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    const defaultHeaders: HeadersInit = {\n      "Content-Type": "application/json",\n    };\n    \n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...defaultHeaders,\n        ...options.headers,\n      },\n      credentials: "include", // Para cookies\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() =&gt; ({}));\n      throw new ApiError(\n        errorData.error?.message || `HTTP ${response.status}`,\n        response.status,\n        errorData\n      );\n    }\n    \n    return response.json();\n  }\n  \n  // M√©todos de conveniencia\n  get&lt;T&gt;(endpoint: string) {\n    return this.request&lt;T&gt;(endpoint);\n  }\n  \n  post&lt;T&gt;(endpoint: string, data: any) {\n    return this.request&lt;T&gt;(endpoint, {\n      method: "POST",\n      body: JSON.stringify(data),\n    });\n  }\n  \n  put&lt;T&gt;(endpoint: string, data: any) {\n    return this.request&lt;T&gt;(endpoint, {\n      method: "PUT",\n      body: JSON.stringify(data),\n    });\n  }\n  \n  delete&lt;T&gt;(endpoint: string) {\n    return this.request&lt;T&gt;(endpoint, {\n      method: "DELETE",\n    });\n  }\n}\n\nexport const apiClient = new ApiClient();</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-javascript">// Configuraci√≥n CORS en el backend (Express ejemplo)\n// cors.js\nconst allowedOrigins = [\n  "http://localhost:3000", // Frontend dev\n  "https://miapp.vercel.app", // Frontend prod\n  "https://miapp.com" // Dominio final\n];\n\nconst corsOptions = {\n  origin: (origin, callback) =&gt; {\n    // Permitir requests sin origin (ej: mobile apps, Postman)\n    if (!origin) return callback(null, true);\n    \n    if (allowedOrigins.includes(origin)) {\n      callback(null, true);\n    } else {\n      callback(new Error("No permitido por CORS"));\n    }\n  },\n  credentials: true, // Permitir cookies\n  optionsSuccessStatus: 200\n};\n\napp.use(cors(corsOptions));</code></pre></div>',
            ],
          },
          {
            title: "5.4 Breve Introducci√≥n a Pruebas Automatizadas en Frontend",
            content: [
              "<p><strong>Concepto:</strong> Escribir tests para componentes de React y l√≥gica de JavaScript</p>",
              "<p><em>Como los tests unitarios e integraci√≥n que ya conoces en backend, pero para componentes UI y l√≥gica de cliente.</em></p>",
              "<p><strong>Herramientas:</strong> Jest, Vitest, React Testing Library</p>",
              "<p><em>Jest/Vitest son como el framework de testing (similar a Mocha o Jest en Node.js), React Testing Library ayuda a testear componentes.</em></p>",
              "<p><strong>Tipos de tests en frontend:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Unit tests:</strong> Funciones puras, utilidades, hooks</li>",
              "<li><strong>Component tests:</strong> Componentes individuales</li>",
              "<li><strong>Integration tests:</strong> Flujos completos usuario</li>",
              "<li><strong>API tests:</strong> Mocks de peticiones HTTP</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// utils.test.ts - Test de funci√≥n utilitaria\nimport { formatPrice, validateEmail } from "./utils";\n\ndescribe("Utilidades", () =&gt; {\n  test("formatPrice formatea correctamente", () =&gt; {\n    expect(formatPrice(1234.56)).toBe("$1,234.56");\n    expect(formatPrice(0)).toBe("$0.00");\n  });\n  \n  test("validateEmail valida emails", () =&gt; {\n    expect(validateEmail("test@example.com")).toBe(true);\n    expect(validateEmail("invalid-email")).toBe(false);\n  });\n});\n\n// Button.test.tsx - Test de componente\nimport { render, screen, fireEvent } from "@testing-library/react";\nimport Button from "./Button";\n\ndescribe("Button Component", () =&gt; {\n  test("renderiza texto correctamente", () =&gt; {\n    render(&lt;Button&gt;Click me&lt;/Button&gt;);\n    expect(screen.getByText("Click me")).toBeInTheDocument();\n  });\n  \n  test("ejecuta onClick cuando se clickea", () =&gt; {\n    const handleClick = jest.fn();\n    render(&lt;Button onClick={handleClick}&gt;Click&lt;/Button&gt;);\n    \n    fireEvent.click(screen.getByText("Click"));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n  \n  test("se deshabilita cuando disabled=true", () =&gt; {\n    render(&lt;Button disabled&gt;Disabled&lt;/Button&gt;);\n    expect(screen.getByRole("button")).toBeDisabled();\n  });\n});</code></pre></div>',
            ],
          },
          {
            title: "5.5 Debugging y Herramientas de Desarrollo",
            content: [
              "<p><strong>React Developer Tools</strong></p>",
              "<p><em>Extensi√≥n del browser que te permite inspeccionar componentes React, su estado y props. Como el inspector de elementos pero para React.</em></p>",
              "<p><strong>Network tab para debugging de APIs</strong></p>",
              "<p><em>La pesta√±a Network del DevTools del browser muestra todas las peticiones HTTP. Crucial para debuggear problemas de API.</em></p>",
              "<p><strong>Error boundaries en React</strong></p>",
              "<p><em>Componentes que capturan errores JavaScript en el √°rbol de componentes, como try/catch pero para componentes.</em></p>",
              "<p><strong>Logging y monitoreo b√°sico</strong></p>",
              "<p><em>Como logs en backend, pero adaptado para frontend. √ötil para trackear errores y comportamiento de usuario.</em></p>",
              "<p><strong>Herramientas de debugging esenciales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Console.log estrat√©gico:</strong> Para valores de estado y flujo</li>",
              "<li><strong>React DevTools:</strong> Inspeccionar componentes y estado</li>",
              "<li><strong>Network tab:</strong> Verificar peticiones API</li>",
              "<li><strong>Sources tab:</strong> Breakpoints en c√≥digo</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Error Boundary para capturar errores\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n  \n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n  \n  componentDidCatch(error, errorInfo) {\n    console.error("Error capturado:", error, errorInfo);\n    // Aqu√≠ podr√≠as enviar el error a un servicio como Sentry\n  }\n  \n  render() {\n    if (this.state.hasError) {\n      return (\n        &lt;div className="error-fallback"&gt;\n          &lt;h2&gt;Algo sali√≥ mal&lt;/h2&gt;\n          &lt;p&gt;{this.state.error?.message}&lt;/p&gt;\n          &lt;button onClick={() =&gt; window.location.reload()}&gt;\n            Recargar p√°gina\n          &lt;/button&gt;\n        &lt;/div&gt;\n      );\n    }\n    \n    return this.props.children;\n  }\n}\n\n// Hook para logging y debugging\nfunction useDebugValue(value, label = "Value") {\n  useEffect(() =&gt; {\n    if (process.env.NODE_ENV === "development") {\n      console.log(`[DEBUG] ${label}:`, value);\n    }\n  }, [value, label]);\n}\n\n// Utility para logging de errores\nexport function logError(error: Error, context?: any) {\n  const errorInfo = {\n    message: error.message,\n    stack: error.stack,\n    timestamp: new Date().toISOString(),\n    url: window.location.href,\n    userAgent: navigator.userAgent,\n    context\n  };\n  \n  console.error("Error logged:", errorInfo);\n  \n  // En producci√≥n, enviar√≠as esto a un servicio de monitoreo\n  if (process.env.NODE_ENV === "production") {\n    // sendToMonitoringService(errorInfo);\n  }\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Custom hook para debugging API calls\nfunction useApiCall&lt;T&gt;(url: string, options?: RequestInit) {\n  const [data, setData] = useState&lt;T | null&gt;(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState&lt;string | null&gt;(null);\n  \n  const makeRequest = useCallback(async () =&gt; {\n    setLoading(true);\n    setError(null);\n    \n    const startTime = Date.now();\n    console.log(`[API] üì§ ${options?.method || "GET"} ${url}`);\n    \n    try {\n      const response = await fetch(url, options);\n      const duration = Date.now() - startTime;\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      \n      console.log(`[API] ‚úÖ ${url} (${duration}ms)`, result);\n      setData(result);\n      \n    } catch (err) {\n      const duration = Date.now() - startTime;\n      const errorMsg = err instanceof Error ? err.message : "Error desconocido";\n      \n      console.error(`[API] ‚ùå ${url} (${duration}ms)`, errorMsg);\n      setError(errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  }, [url, options]);\n  \n  return { data, loading, error, refetch: makeRequest };\n}</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "üõ†Ô∏è",
        title: "M√≥dulo 6: Proyecto Pr√°ctico Integrador",
        shortTitle: "Proyecto",
        objective:
          "Construir un e-commerce completo integrando todos los conocimientos: React, TypeScript, Next.js, Tailwind y herramientas IA modernas.",
        completed: false,
        sections: [
          {
            title: "6.1 Planificaci√≥n y Dise√±o del E-commerce",
            content: [
              "<p><strong>Construcci√≥n de un E-commerce Sencillo:</strong> Proyecto integrador que combina todos los conceptos aprendidos</p>",
              "<p><em>Como construir una aplicaci√≥n completa de backend, pero en este caso es un frontend que consume APIs. Aplicas arquitectura, patrones y mejores pr√°cticas.</em></p>",
              "<p><strong>Dise√±o y Maquetaci√≥n:</strong> Utilizando HTML y Tailwind CSS</p>",
              "<p><em>Definir la estructura visual y los componentes principales antes de empezar a codificar. Como el dise√±o de base de datos antes del desarrollo.</em></p>",
              "<p><strong>Funcionalidades principales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Cat√°logo de productos:</strong> Listado, filtros, b√∫squeda</li>",
              "<li><strong>Carrito de compras:</strong> Agregar, quitar, actualizar cantidades</li>",
              "<li><strong>Checkout:</strong> Formulario de compra y confirmaci√≥n</li>",
              "<li><strong>Autenticaci√≥n:</strong> Login, registro, perfil de usuario</li>",
              "<li><strong>Panel admin:</strong> Gesti√≥n b√°sica de productos</li>",
              "</ul>",
              "<p><strong>Arquitectura del proyecto:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Componentes reutilizables:</strong> Button, Card, Modal, Form</li>",
              "<li><strong>Gesti√≥n de estado:</strong> Zustand para carrito, auth y productos</li>",
              "<li><strong>Integraci√≥n con API:</strong> Tu propia API de backend</li>",
              "<li><strong>Routing:</strong> P√°ginas est√°ticas y din√°micas con Next.js</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="text-green-400"># Estructura del proyecto e-commerce\nsrc/\n‚îú‚îÄ‚îÄ app/\n‚îÇ   ‚îú‚îÄ‚îÄ (auth)/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login/page.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ register/page.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ (shop)/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ products/\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx          # Lista de productos\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [id]/page.tsx     # Detalle de producto\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cart/page.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ checkout/page.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ admin/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ products/page.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ orders/page.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ api/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ webhook/route.ts      # Para pagos\n‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx\n‚îÇ   ‚îî‚îÄ‚îÄ page.tsx                  # Homepage\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ ui/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Card.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Modal.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Input.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ layout/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Sidebar.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ shop/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCard.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductList.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Cart.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CartItem.tsx\n‚îÇ   ‚îî‚îÄ‚îÄ forms/\n‚îÇ       ‚îú‚îÄ‚îÄ LoginForm.tsx\n‚îÇ       ‚îî‚îÄ‚îÄ CheckoutForm.tsx\n‚îú‚îÄ‚îÄ lib/\n‚îÇ   ‚îú‚îÄ‚îÄ api.ts\n‚îÇ   ‚îú‚îÄ‚îÄ auth.ts\n‚îÇ   ‚îú‚îÄ‚îÄ utils.ts\n‚îÇ   ‚îî‚îÄ‚îÄ validations.ts\n‚îî‚îÄ‚îÄ stores/\n    ‚îú‚îÄ‚îÄ useCartStore.ts\n    ‚îú‚îÄ‚îÄ useAuthStore.ts\n    ‚îî‚îÄ‚îÄ useProductStore.ts</code></pre></div>',
            ],
          },
          {
            title: "6.2 Desarrollo de Componentes y Estado",
            content: [
              "<p><strong>Desarrollo de Componentes:</strong> Crear componentes reutilizables aplicando TypeScript</p>",
              "<p><em>Como desarrollar m√≥dulos reutilizables en backend. Cada componente tiene una responsabilidad espec√≠fica y una interfaz clara.</em></p>",
              "<p><strong>Componentes clave del e-commerce:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>ProductCard:</strong> Tarjeta de producto con imagen, nombre, precio</li>",
              "<li><strong>Cart:</strong> Carrito lateral con items y totales</li>",
              "<li><strong>Checkout:</strong> Formulario de pago con validaciones</li>",
              "<li><strong>Navigation:</strong> Header con autenticaci√≥n y carrito</li>",
              "</ul>",
              "<p><strong>Gesti√≥n de Estado:</strong> Usar Zustand para el estado del carrito</p>",
              "<p><em>Como usar un estado global en tu aplicaci√≥n. Zustand es m√°s simple que Redux pero igual de potente.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// stores/useCartStore.ts - Estado global del carrito\nimport { create } from "zustand";\nimport { persist } from "zustand/middleware";\n\ninterface CartItem {\n  id: number;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n}\n\ninterface CartStore {\n  items: CartItem[];\n  total: number;\n  itemCount: number;\n  addItem: (product: Omit&lt;CartItem, "quantity"&gt;) =&gt; void;\n  removeItem: (id: number) =&gt; void;\n  updateQuantity: (id: number, quantity: number) =&gt; void;\n  clearCart: () =&gt; void;\n}\n\nexport const useCartStore = create&lt;CartStore&gt;()(\n  persist(\n    (set, get) =&gt; ({\n      items: [],\n      total: 0,\n      itemCount: 0,\n      \n      addItem: (product) =&gt; {\n        const items = get().items;\n        const existingItem = items.find(item =&gt; item.id === product.id);\n        \n        if (existingItem) {\n          set({\n            items: items.map(item =&gt;\n              item.id === product.id\n                ? { ...item, quantity: item.quantity + 1 }\n                : item\n            )\n          });\n        } else {\n          set({ items: [...items, { ...product, quantity: 1 }] });\n        }\n        \n        // Recalcular totales\n        const newItems = get().items;\n        const newTotal = newItems.reduce((sum, item) =&gt; sum + (item.price * item.quantity), 0);\n        const newItemCount = newItems.reduce((sum, item) =&gt; sum + item.quantity, 0);\n        \n        set({ total: newTotal, itemCount: newItemCount });\n      },\n      \n      removeItem: (id) =&gt; {\n        const items = get().items.filter(item =&gt; item.id !== id);\n        const total = items.reduce((sum, item) =&gt; sum + (item.price * item.quantity), 0);\n        const itemCount = items.reduce((sum, item) =&gt; sum + item.quantity, 0);\n        \n        set({ items, total, itemCount });\n      },\n      \n      updateQuantity: (id, quantity) =&gt; {\n        if (quantity &lt;= 0) {\n          get().removeItem(id);\n          return;\n        }\n        \n        const items = get().items.map(item =&gt;\n          item.id === id ? { ...item, quantity } : item\n        );\n        const total = items.reduce((sum, item) =&gt; sum + (item.price * item.quantity), 0);\n        const itemCount = items.reduce((sum, item) =&gt; sum + item.quantity, 0);\n        \n        set({ items, total, itemCount });\n      },\n      \n      clearCart: () =&gt; set({ items: [], total: 0, itemCount: 0 }),\n    }),\n    { name: "cart-storage" } // Persiste en localStorage\n  )\n);</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// components/shop/ProductCard.tsx\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n  image: string;\n  description: string;\n  category: string;\n}\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const addItem = useCartStore(state =&gt; state.addItem);\n  const [isAdding, setIsAdding] = useState(false);\n  \n  const handleAddToCart = async () =&gt; {\n    setIsAdding(true);\n    addItem({\n      id: product.id,\n      name: product.name,\n      price: product.price,\n      image: product.image\n    });\n    \n    // Feedback visual\n    setTimeout(() =&gt; setIsAdding(false), 500);\n  };\n  \n  return (\n    &lt;div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"&gt;\n      &lt;div className="relative aspect-square"&gt;\n        &lt;Image\n          src={product.image}\n          alt={product.name}\n          fill\n          className="object-cover"\n        /&gt;\n        {product.category && (\n          &lt;span className="absolute top-2 left-2 bg-blue-500 text-white px-2 py-1 rounded-full text-xs"&gt;\n            {product.category}\n          &lt;/span&gt;\n        )}\n      &lt;/div&gt;\n      \n      &lt;div className="p-4"&gt;\n        &lt;h3 className="font-semibold text-lg mb-2"&gt;{product.name}&lt;/h3&gt;\n        &lt;p className="text-gray-600 text-sm mb-3 line-clamp-2"&gt;\n          {product.description}\n        &lt;/p&gt;\n        \n        &lt;div className="flex items-center justify-between"&gt;\n          &lt;span className="text-xl font-bold text-green-600"&gt;\n            ${product.price.toFixed(2)}\n          &lt;/span&gt;\n          \n          &lt;Button\n            onClick={handleAddToCart}\n            disabled={isAdding}\n            variant="primary"\n            size="sm"\n          &gt;\n            {isAdding ? (\n              &lt;&gt;\n                &lt;Spinner className="w-4 h-4 mr-2" /&gt;\n                Agregando...\n              &lt;/&gt;\n            ) : (\n              "Agregar al carrito"\n            )}\n          &lt;/Button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
            ],
          },
          {
            title: "6.3 Integraci√≥n con API Backend",
            content: [
              "<p><strong>Integraci√≥n con API Backend:</strong> Consumir tus propios endpoints</p>",
              "<p><em>Conectar el frontend con tu API de backend. Como cliente y servidor trabajando juntos, pero ahora eres responsable de ambos lados.</em></p>",
              "<p><strong>Endpoints principales para el e-commerce:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Productos:</strong> GET /api/products, GET /api/products/:id</li>",
              "<li><strong>Carrito:</strong> POST /api/cart/add, PUT /api/cart/update</li>",
              "<li><strong>√ìrdenes:</strong> POST /api/orders, GET /api/orders/:id</li>",
              "<li><strong>Auth:</strong> POST /api/auth/login, POST /api/auth/register</li>",
              "</ul>",
              "<p><strong>Manejo de estados de carga y errores:</strong></p>",
              "<p><em>Como manejar timeouts y errores de conexi√≥n en tu API, pero desde el lado del cliente. Importante dar feedback al usuario.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/api/products.ts\nexport interface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n  category: string;\n  stock: number;\n  createdAt: string;\n}\n\nexport interface ProductsResponse {\n  products: Product[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n}\n\nexport const productApi = {\n  // Obtener lista de productos con filtros\n  getProducts: async (params?: {\n    page?: number;\n    limit?: number;\n    category?: string;\n    search?: string;\n  }): Promise&lt;ProductsResponse&gt; =&gt; {\n    const searchParams = new URLSearchParams();\n    if (params?.page) searchParams.set("page", params.page.toString());\n    if (params?.limit) searchParams.set("limit", params.limit.toString());\n    if (params?.category) searchParams.set("category", params.category);\n    if (params?.search) searchParams.set("search", params.search);\n    \n    const response = await apiClient.get&lt;ProductsResponse&gt;(\n      `/products?${searchParams.toString()}`\n    );\n    return response.data!;\n  },\n  \n  // Obtener producto por ID\n  getProduct: async (id: number): Promise&lt;Product&gt; =&gt; {\n    const response = await apiClient.get&lt;Product&gt;(`/products/${id}`);\n    return response.data!;\n  },\n  \n  // Crear producto (admin)\n  createProduct: async (product: Omit&lt;Product, "id" | "createdAt"&gt;): Promise&lt;Product&gt; =&gt; {\n    const response = await apiClient.post&lt;Product&gt;("/products", product);\n    return response.data!;\n  },\n  \n  // Actualizar producto (admin)\n  updateProduct: async (id: number, updates: Partial&lt;Product&gt;): Promise&lt;Product&gt; =&gt; {\n    const response = await apiClient.put&lt;Product&gt;(`/products/${id}`, updates);\n    return response.data!;\n  },\n  \n  // Eliminar producto (admin)\n  deleteProduct: async (id: number): Promise&lt;void&gt; =&gt; {\n    await apiClient.delete(`/products/${id}`);\n  }\n};</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// hooks/useProducts.ts - Hook para manejar productos\nexport function useProducts(params?: {\n  page?: number;\n  category?: string;\n  search?: string;\n}) {\n  const [products, setProducts] = useState&lt;Product[]&gt;([]);\n  const [pagination, setPagination] = useState&lt;any&gt;(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState&lt;string | null&gt;(null);\n  \n  const fetchProducts = useCallback(async () =&gt; {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await productApi.getProducts(params);\n      setProducts(response.products);\n      setPagination(response.pagination);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : "Error al cargar productos");\n      console.error("Error fetching products:", err);\n    } finally {\n      setLoading(false);\n    }\n  }, [params]);\n  \n  useEffect(() =&gt; {\n    fetchProducts();\n  }, [fetchProducts]);\n  \n  return {\n    products,\n    pagination,\n    loading,\n    error,\n    refetch: fetchProducts\n  };\n}\n\n// Uso en componente\nfunction ProductsPage() {\n  const [searchTerm, setSearchTerm] = useState("");\n  const [selectedCategory, setSelectedCategory] = useState("");\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  const { products, pagination, loading, error, refetch } = useProducts({\n    page: currentPage,\n    search: searchTerm,\n    category: selectedCategory\n  });\n  \n  if (loading) return &lt;ProductListSkeleton /&gt;;\n  if (error) return &lt;ErrorMessage message={error} onRetry={refetch} /&gt;;\n  \n  return (\n    &lt;div&gt;\n      &lt;SearchAndFilters \n        onSearch={setSearchTerm}\n        onCategoryChange={setSelectedCategory}\n      /&gt;\n      \n      &lt;ProductGrid products={products} /&gt;\n      \n      &lt;Pagination \n        current={currentPage}\n        total={pagination?.totalPages || 0}\n        onChange={setCurrentPage}\n      /&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
            ],
          },
          {
            title: "6.4 Enrutamiento con Next.js y Despliegue",
            content: [
              "<p><strong>Enrutamiento con Next.js:</strong> Implementar rutas est√°ticas y din√°micas</p>",
              "<p><em>Como definir rutas en Express, pero usando el sistema de archivos. Cada p√°gina es un archivo, cada carpeta es una ruta.</em></p>",
              "<p><strong>Rutas del e-commerce:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Est√°ticas:</strong> /, /products, /cart, /checkout, /login</li>",
              "<li><strong>Din√°micas:</strong> /products/[id], /orders/[id], /admin/products/[id]</li>",
              "<li><strong>Grupos de rutas:</strong> (auth), (shop), (admin) para organizar</li>",
              "<li><strong>Layouts compartidos:</strong> Header/Footer, Auth layout, Admin layout</li>",
              "</ul>",
              "<p><strong>Despliegue:</strong> Publicar el proyecto en Vercel</p>",
              "<p><em>Como deployear tu aplicaci√≥n de backend, pero para frontend. Vercel se conecta a tu GitHub y autodeploya en cada push.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// app/(shop)/products/[id]/page.tsx\ninterface ProductPageProps {\n  params: { id: string };\n}\n\nexport default async function ProductPage({ params }: ProductPageProps) {\n  const productId = parseInt(params.id);\n  \n  try {\n    const product = await productApi.getProduct(productId);\n    \n    return (\n      &lt;div className="max-w-6xl mx-auto px-4 py-8"&gt;\n        &lt;div className="grid grid-cols-1 md:grid-cols-2 gap-8"&gt;\n          {/* Imagen del producto */}\n          &lt;div className="aspect-square relative"&gt;\n            &lt;Image\n              src={product.image}\n              alt={product.name}\n              fill\n              className="object-cover rounded-lg"\n              priority\n            /&gt;\n          &lt;/div&gt;\n          \n          {/* Detalles del producto */}\n          &lt;div&gt;\n            &lt;h1 className="text-3xl font-bold mb-4"&gt;{product.name}&lt;/h1&gt;\n            &lt;p className="text-xl text-green-600 font-semibold mb-4"&gt;\n              ${product.price.toFixed(2)}\n            &lt;/p&gt;\n            &lt;p className="text-gray-600 mb-6"&gt;{product.description}&lt;/p&gt;\n            \n            &lt;div className="mb-6"&gt;\n              &lt;span className="text-sm text-gray-500"&gt;Categor√≠a: &lt;/span&gt;\n              &lt;span className="text-blue-600"&gt;{product.category}&lt;/span&gt;\n            &lt;/div&gt;\n            \n            &lt;div className="mb-6"&gt;\n              &lt;span className="text-sm text-gray-500"&gt;Stock: &lt;/span&gt;\n              &lt;span className={product.stock &gt; 0 ? "text-green-600" : "text-red-600"}&gt;\n                {product.stock &gt; 0 ? `${product.stock} disponibles` : "Sin stock"}\n              &lt;/span&gt;\n            &lt;/div&gt;\n            \n            &lt;AddToCartSection product={product} /&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;RelatedProducts categoryId={product.category} currentProductId={product.id} /&gt;\n      &lt;/div&gt;\n    );\n  } catch (error) {\n    notFound(); // Redirige a 404 si no encuentra el producto\n  }\n}\n\n// Generar metadata para SEO\nexport async function generateMetadata(\n  { params }: ProductPageProps\n): Promise&lt;Metadata&gt; {\n  try {\n    const product = await productApi.getProduct(parseInt(params.id));\n    \n    return {\n      title: `${product.name} - Mi Tienda`,\n      description: product.description,\n      openGraph: {\n        title: product.name,\n        description: product.description,\n        images: [product.image],\n      },\n    };\n  } catch {\n    return {\n      title: "Producto no encontrado",\n    };\n  }\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-bash"># Despliegue en Vercel\n\n# 1. Conectar repositorio en vercel.com\n#    - Import Git Repository\n#    - Seleccionar tu repo de GitHub\n#    - Vercel detecta autom√°ticamente que es Next.js\n\n# 2. Configurar variables de entorno en Vercel Dashboard:\n#    Settings ‚Üí Environment Variables\nNEXT_PUBLIC_API_URL=https://api.mitienda.com\nNEXT_PUBLIC_STRIPE_PUBLIC_KEY=pk_live_...\nAPI_SECRET_KEY=sk_live_...\nDATABASE_URL=postgresql://...\n\n# 3. Deploy autom√°tico\n#    - Cada push a main ‚Üí deploy a producci√≥n\n#    - Cada PR ‚Üí preview deployment\n#    - Rollback f√°cil desde dashboard\n\n# 4. Configuraci√≥n opcional en vercel.json\n{\n  "functions": {\n    "app/api/**/*.ts": {\n      "maxDuration": 30\n    }\n  },\n  "headers": [\n    {\n      "source": "/(.*)",\n      "headers": [\n        {\n          "key": "X-Frame-Options",\n          "value": "DENY"\n        },\n        {\n          "key": "X-Content-Type-Options", \n          "value": "nosniff"\n        }\n      ]\n    }\n  ]\n}</code></pre></div>',
            ],
          },
          {
            title: "6.5 Consideraciones de Seguridad Frontend",
            content: [
              "<p><strong>Validaci√≥n client-side vs server-side</strong></p>",
              "<p><em>La validaci√≥n en el cliente es para UX (feedback inmediato), pero SIEMPRE debes validar en el servidor. El cliente no es confiable.</em></p>",
              "<p><strong>XSS prevention</strong></p>",
              "<p><em>Cross-Site Scripting: evitar que c√≥digo malicioso se ejecute en tu app. React protege autom√°ticamente, pero ten cuidado con dangerouslySetInnerHTML.</em></p>",
              "<p><strong>Content Security Policy b√°sico</strong></p>",
              "<p><em>Como CORS pero para recursos (scripts, im√°genes). Define qu√© fuentes de contenido son permitidas en tu app.</em></p>",
              "<p><strong>Sanitizaci√≥n de inputs</strong></p>",
              "<p><em>Como validar y limpiar datos de entrada en tu API, pero tambi√©n en el frontend para prevenir ataques.</em></p>",
              "<p><strong>Checklist de seguridad frontend:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ Nunca conf√≠es en validaci√≥n del cliente √∫nicamente</li>",
              "<li>‚úÖ Sanitiza inputs antes de mostrarlos</li>",
              "<li>‚úÖ Usa HTTPS en producci√≥n</li>",
              "<li>‚úÖ Configura CSP headers</li>",
              "<li>‚úÖ No expongas datos sensibles en el cliente</li>",
              "<li>‚úÖ Usa cookies HttpOnly para tokens</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/validation.ts - Validaci√≥n y sanitizaci√≥n\nimport DOMPurify from "isomorphic-dompurify";\nimport { z } from "zod";\n\n// Schema de validaci√≥n con Zod\nexport const productSchema = z.object({\n  name: z.string().min(1, "Nombre requerido").max(100, "Nombre muy largo"),\n  description: z.string().max(500, "Descripci√≥n muy larga"),\n  price: z.number().positive("Precio debe ser positivo"),\n  category: z.string().min(1, "Categor√≠a requerida")\n});\n\nexport const checkoutSchema = z.object({\n  email: z.string().email("Email inv√°lido"),\n  firstName: z.string().min(1, "Nombre requerido"),\n  lastName: z.string().min(1, "Apellido requerido"),\n  address: z.string().min(5, "Direcci√≥n muy corta"),\n  city: z.string().min(1, "Ciudad requerida"),\n  zipCode: z.string().regex(/^\\d{5}$/, "C√≥digo postal inv√°lido")\n});\n\n// Sanitizaci√≥n de contenido HTML\nexport function sanitizeHtml(html: string): string {\n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ["b", "i", "em", "strong", "p", "br"],\n    ALLOWED_ATTR: []\n  });\n}\n\n// Validaci√≥n de archivos de imagen\nexport function validateImageFile(file: File): { valid: boolean; error?: string } {\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  const allowedTypes = ["image/jpeg", "image/png", "image/webp"];\n  \n  if (!allowedTypes.includes(file.type)) {\n    return { valid: false, error: "Tipo de archivo no permitido" };\n  }\n  \n  if (file.size &gt; maxSize) {\n    return { valid: false, error: "Archivo muy grande (m√°ximo 5MB)" };\n  }\n  \n  return { valid: true };\n}\n\n// Rate limiting b√°sico para formularios\nclass RateLimiter {\n  private attempts = new Map&lt;string, { count: number; lastAttempt: number }&gt;();\n  \n  canProceed(identifier: string, maxAttempts = 5, windowMs = 60000): boolean {\n    const now = Date.now();\n    const userAttempts = this.attempts.get(identifier);\n    \n    if (!userAttempts || now - userAttempts.lastAttempt &gt; windowMs) {\n      this.attempts.set(identifier, { count: 1, lastAttempt: now });\n      return true;\n    }\n    \n    if (userAttempts.count &gt;= maxAttempts) {\n      return false;\n    }\n    \n    userAttempts.count++;\n    userAttempts.lastAttempt = now;\n    return true;\n  }\n}\n\nexport const formRateLimiter = new RateLimiter();</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "üß™",
        title: "M√≥dulo 7: Testing y Accesibilidad",
        shortTitle: "Testing & A11y",
        objective: "Implementar testing automatizado y garantizar accesibilidad WCAG 2.1 AA en las aplicaciones.",
        completed: false,
        sections: [
          {
            title: "7.1 Testing Visual",
            content: [
              "<p><strong>Qu√© es:</strong> Comparar capturas de pantalla de la UI en distintos momentos para detectar cambios no intencionales</p>",
              "<p><em>Como tests de regresi√≥n en backend, pero para UI. Automatiza la detecci√≥n de cambios visuales que podr√≠an romper el dise√±o.</em></p>",
              "<p><strong>Herramientas:</strong> Storybook + Chromatic, Playwright, Percy</p>",
              "<p><em>Storybook es como un cat√°logo interactivo de componentes. Chromatic toma screenshots y los compara entre versiones.</em></p>",
              "<p><strong>Buenas pr√°cticas:</strong> Mantener componentes peque√±os y aislados</p>",
              "<p><em>Como funciones puras en backend: componentes sin efectos secundarios son m√°s f√°ciles de testear visualmente.</em></p>",
              "<p><strong>Workflow de testing visual:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>üì± Crear stories de componentes en Storybook</li>",
              "<li>üì∏ Tomar screenshots de baseline</li>",
              "<li>üîç Ejecutar tests en cada cambio</li>",
              "<li>üëÄ Revisar diferencias detectadas</li>",
              "<li>‚úÖ Aprobar cambios intencionales</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Button.stories.ts - Configuraci√≥n de Storybook\nimport type { Meta, StoryObj } from "@storybook/react";\nimport { Button } from "./Button";\n\nconst meta: Meta&lt;typeof Button&gt; = {\n  title: "UI/Button",\n  component: Button,\n  parameters: {\n    layout: "centered",\n    docs: {\n      description: {\n        component: "Componente de bot√≥n reutilizable con m√∫ltiples variantes."\n      }\n    }\n  },\n  tags: ["autodocs"],\n  argTypes: {\n    variant: {\n      control: { type: "select" },\n      options: ["primary", "secondary", "danger"]\n    },\n    size: {\n      control: { type: "select" },\n      options: ["sm", "md", "lg"]\n    }\n  }\n};\n\nexport default meta;\ntype Story = StoryObj&lt;typeof meta&gt;;\n\n// Stories para diferentes estados\nexport const Primary: Story = {\n  args: {\n    variant: "primary",\n    children: "Button Primary",\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    variant: "secondary",\n    children: "Button Secondary",\n  },\n};\n\nexport const Danger: Story = {\n  args: {\n    variant: "danger",\n    children: "Delete Item",\n  },\n};\n\nexport const Loading: Story = {\n  args: {\n    variant: "primary",\n    children: "Loading...",\n    disabled: true,\n  },\n};\n\nexport const AllSizes: Story = {\n  render: () =&gt; (\n    &lt;div className="flex gap-4 items-center"&gt;\n      &lt;Button variant="primary" size="sm"&gt;Small&lt;/Button&gt;\n      &lt;Button variant="primary" size="md"&gt;Medium&lt;/Button&gt;\n      &lt;Button variant="primary" size="lg"&gt;Large&lt;/Button&gt;\n    &lt;/div&gt;\n  ),\n};</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// playwright.config.ts - Configuraci√≥n para testing visual\nimport { defineConfig, devices } from "@playwright/test";\n\nexport default defineConfig({\n  testDir: "./tests",\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: "html",\n  use: {\n    baseURL: "http://localhost:3000",\n    trace: "on-first-retry",\n    screenshot: "only-on-failure",\n  },\n\n  projects: [\n    {\n      name: "chromium",\n      use: { ...devices["Desktop Chrome"] },\n    },\n    {\n      name: "firefox", \n      use: { ...devices["Desktop Firefox"] },\n    },\n    {\n      name: "webkit",\n      use: { ...devices["Desktop Safari"] },\n    },\n    // Mobile testing\n    {\n      name: "Mobile Chrome",\n      use: { ...devices["Pixel 5"] },\n    },\n  ],\n\n  webServer: {\n    command: "npm run dev",\n    url: "http://localhost:3000",\n    reuseExistingServer: !process.env.CI,\n  },\n});\n\n// tests/visual.spec.ts - Tests visuales con Playwright\nimport { test, expect } from "@playwright/test";\n\ntest.describe("Visual Tests", () =&gt; {\n  test("homepage looks correct", async ({ page }) =&gt; {\n    await page.goto("/");\n    await expect(page).toHaveScreenshot("homepage.png");\n  });\n\n  test("product card component", async ({ page }) =&gt; {\n    await page.goto("/products");\n    const productCard = page.locator(".product-card").first();\n    await expect(productCard).toHaveScreenshot("product-card.png");\n  });\n\n  test("responsive layout", async ({ page }) =&gt; {\n    await page.goto("/");\n    \n    // Desktop\n    await page.setViewportSize({ width: 1200, height: 800 });\n    await expect(page).toHaveScreenshot("desktop-layout.png");\n    \n    // Tablet\n    await page.setViewportSize({ width: 768, height: 1024 });\n    await expect(page).toHaveScreenshot("tablet-layout.png");\n    \n    // Mobile\n    await page.setViewportSize({ width: 375, height: 667 });\n    await expect(page).toHaveScreenshot("mobile-layout.png");\n  });\n});</code></pre></div>',
            ],
          },
          {
            title: "7.2 Testing de Accesibilidad",
            content: [
              "<p><strong>Objetivo:</strong> Garantizar que la app cumpla est√°ndares WCAG</p>",
              "<p><em>Como validar que tu API cumple con est√°ndares de seguridad, pero para accesibilidad web. Es crucial para usuarios con discapacidades.</em></p>",
              "<p><strong>Herramientas:</strong> axe-core, Lighthouse, Wave</p>",
              "<p><em>axe-core es como un linter para accesibilidad. Lighthouse hace auditor√≠as completas. Wave es una extensi√≥n para revisar p√°ginas.</em></p>",
              "<p><strong>WCAG 2.1 AA - Principios b√°sicos:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Perceptible:</strong> La informaci√≥n debe ser presentada de formas que los usuarios puedan percibir</li>",
              "<li><strong>Operable:</strong> Los componentes deben ser operables por todos los usuarios</li>",
              "<li><strong>Comprensible:</strong> La informaci√≥n y el manejo de la UI deben ser comprensibles</li>",
              "<li><strong>Robusto:</strong> El contenido debe ser interpretable por diversas tecnolog√≠as</li>",
              "</ul>",
              "<p><strong>Checklist b√°sico de accesibilidad:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ <strong>Contraste m√≠nimo 4.5:1</strong> - Texto legible para usuarios con baja visi√≥n</li>",
              "<li>‚úÖ <strong>Navegaci√≥n por teclado funcional</strong> - Acceso sin mouse</li>",
              "<li>‚úÖ <strong>Texto alternativo en im√°genes</strong> - Para lectores de pantalla</li>",
              "<li>‚úÖ <strong>Etiquetas correctas en formularios</strong> - Asociaci√≥n label/input</li>",
              "<li>‚úÖ <strong>Estructura de headings l√≥gica</strong> - H1, H2, H3 en orden</li>",
              "<li>‚úÖ <strong>Focus visible</strong> - Indicadores claros de elemento activo</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/accessibility.ts - Utilidades para accesibilidad\n\n// Hook para manejo de focus por teclado\nexport function useFocusManagement() {\n  const focusableElementsSelector = \n    \'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])\';\n    \n  const trapFocus = useCallback((container: HTMLElement) =&gt; {\n    const focusableElements = container.querySelectorAll(focusableElementsSelector);\n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n    \n    const handleKeyDown = (e: KeyboardEvent) =&gt; {\n      if (e.key !== "Tab") return;\n      \n      if (e.shiftKey) {\n        if (document.activeElement === firstElement) {\n          e.preventDefault();\n          lastElement.focus();\n        }\n      } else {\n        if (document.activeElement === lastElement) {\n          e.preventDefault();\n          firstElement.focus();\n        }\n      }\n    };\n    \n    container.addEventListener("keydown", handleKeyDown);\n    firstElement?.focus();\n    \n    return () =&gt; container.removeEventListener("keydown", handleKeyDown);\n  }, []);\n  \n  return { trapFocus };\n}\n\n// Componente Modal accesible\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () =&gt; void;\n  title: string;\n  children: React.ReactNode;\n}\n\nexport function AccessibleModal({ isOpen, onClose, title, children }: ModalProps) {\n  const modalRef = useRef&lt;HTMLDivElement&gt;(null);\n  const { trapFocus } = useFocusManagement();\n  \n  useEffect(() =&gt; {\n    if (!isOpen || !modalRef.current) return;\n    \n    const cleanup = trapFocus(modalRef.current);\n    \n    // Prevenir scroll del body\n    document.body.style.overflow = "hidden";\n    \n    return () =&gt; {\n      cleanup();\n      document.body.style.overflow = "unset";\n    };\n  }, [isOpen, trapFocus]);\n  \n  // Cerrar con Escape\n  useEffect(() =&gt; {\n    const handleEscape = (e: KeyboardEvent) =&gt; {\n      if (e.key === "Escape" && isOpen) {\n        onClose();\n      }\n    };\n    \n    document.addEventListener("keydown", handleEscape);\n    return () =&gt; document.removeEventListener("keydown", handleEscape);\n  }, [isOpen, onClose]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    &lt;div \n      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"\n      onClick={onClose}\n      role="dialog"\n      aria-modal="true"\n      aria-labelledby="modal-title"\n    &gt;\n      &lt;div \n        ref={modalRef}\n        className="bg-white p-6 rounded-lg max-w-md w-full mx-4"\n        onClick={(e) =&gt; e.stopPropagation()}\n      &gt;\n        &lt;div className="flex justify-between items-center mb-4"&gt;\n          &lt;h2 id="modal-title" className="text-xl font-semibold"&gt;\n            {title}\n          &lt;/h2&gt;\n          &lt;button\n            onClick={onClose}\n            className="text-gray-500 hover:text-gray-700 p-1"\n            aria-label="Cerrar modal"\n          &gt;\n            &lt;X size={20} /&gt;\n          &lt;/button&gt;\n        &lt;/div&gt;\n        {children}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// tests/accessibility.spec.ts - Tests de accesibilidad automatizados\nimport { test, expect } from "@playwright/test";\nimport AxeBuilder from "@axe-core/playwright";\n\ntest.describe("Accessibility Tests", () =&gt; {\n  test("homepage should not have accessibility violations", async ({ page }) =&gt; {\n    await page.goto("/");\n    \n    const accessibilityScanResults = await new AxeBuilder({ page })\n      .withTags(["wcag2a", "wcag2aa", "wcag21aa"])\n      .analyze();\n    \n    expect(accessibilityScanResults.violations).toEqual([]);\n  });\n  \n  test("keyboard navigation works", async ({ page }) =&gt; {\n    await page.goto("/");\n    \n    // Test tab navigation\n    await page.keyboard.press("Tab");\n    const firstFocusable = await page.evaluate(() =&gt; document.activeElement?.tagName);\n    expect(firstFocusable).toBeTruthy();\n    \n    // Test skip links\n    await page.keyboard.press("Tab");\n    const skipLink = page.locator("a").first();\n    await expect(skipLink).toBeVisible();\n    \n    if (await skipLink.textContent() === "Skip to main content") {\n      await skipLink.click();\n      const mainContent = await page.evaluate(() =&gt; document.activeElement?.id);\n      expect(mainContent).toBe("main-content");\n    }\n  });\n  \n  test("forms have proper labels", async ({ page }) =&gt; {\n    await page.goto("/login");\n    \n    const emailInput = page.locator(\'input[type="email"]\');\n    const emailLabel = page.locator(\'label[for="email"]\');\n    \n    await expect(emailInput).toHaveAttribute("id", "email");\n    await expect(emailLabel).toBeVisible();\n    \n    // Test that clicking label focuses input\n    await emailLabel.click();\n    await expect(emailInput).toBeFocused();\n  });\n  \n  test("images have alt text", async ({ page }) =&gt; {\n    await page.goto("/products");\n    \n    const images = page.locator("img");\n    const count = await images.count();\n    \n    for (let i = 0; i &lt; count; i++) {\n      const img = images.nth(i);\n      const alt = await img.getAttribute("alt");\n      expect(alt).toBeTruthy();\n      expect(alt?.trim().length).toBeGreaterThan(0);\n    }\n  });\n  \n  test("color contrast meets WCAG standards", async ({ page }) =&gt; {\n    await page.goto("/");\n    \n    const contrastResults = await new AxeBuilder({ page })\n      .withTags(["color-contrast"])\n      .analyze();\n      \n    expect(contrastResults.violations).toEqual([]);\n  });\n});</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// components/ui/AccessibleForm.tsx - Formulario accesible\ninterface FormFieldProps {\n  id: string;\n  label: string;\n  type?: string;\n  required?: boolean;\n  error?: string;\n  helpText?: string;\n  value: string;\n  onChange: (value: string) =&gt; void;\n}\n\nfunction FormField({ \n  id, \n  label, \n  type = "text", \n  required, \n  error, \n  helpText, \n  value, \n  onChange \n}: FormFieldProps) {\n  const helpId = `${id}-help`;\n  const errorId = `${id}-error`;\n  \n  return (\n    &lt;div className="mb-4"&gt;\n      &lt;label \n        htmlFor={id}\n        className="block text-sm font-medium text-gray-700 mb-1"\n      &gt;\n        {label}\n        {required && &lt;span className="text-red-500 ml-1" aria-label="requerido"&gt;*&lt;/span&gt;}\n      &lt;/label&gt;\n      \n      &lt;input\n        id={id}\n        type={type}\n        value={value}\n        onChange={(e) =&gt; onChange(e.target.value)}\n        required={required}\n        aria-invalid={!!error}\n        aria-describedby={\n          [helpText && helpId, error && errorId].filter(Boolean).join(" ") || undefined\n        }\n        className={\n          `w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n            error ? "border-red-500" : "border-gray-300"\n          }`\n        }\n      /&gt;\n      \n      {helpText && (\n        &lt;p id={helpId} className="text-sm text-gray-600 mt-1"&gt;\n          {helpText}\n        &lt;/p&gt;\n      )}\n      \n      {error && (\n        &lt;p id={errorId} className="text-sm text-red-600 mt-1" role="alert"&gt;\n          {error}\n        &lt;/p&gt;\n      )}\n    &lt;/div&gt;\n  );\n}</code></pre></div>',
            ],
          },
          {
            title: "7.3 Ejercicio Pr√°ctico: Implementaci√≥n Completa",
            content: [
              "<p><strong>Objetivo:</strong> Implementar un componente UI con Tailwind y React, configurarlo en Storybook, ejecutar un test visual y uno de accesibilidad, corregir los problemas detectados y volver a testear.</p>",
              "<p><em>Como un ejercicio completo de TDD, pero para UI: escribes el componente, lo testeas visualmente y para accesibilidad, corriges problemas y vuelves a testear.</em></p>",
              "<p><strong>Flujo del ejercicio:</strong></p>",
              "<ol class='list-decimal pl-6 space-y-2'>",
              "<li><strong>Crear componente:</strong> ProductCard con todas las variantes</li>",
              "<li><strong>Configurar Storybook:</strong> Stories para diferentes estados</li>",
              "<li><strong>Tests visuales:</strong> Screenshots de baseline</li>",
              "<li><strong>Tests de accesibilidad:</strong> Validaci√≥n WCAG</li>",
              "<li><strong>Correcci√≥n de issues:</strong> Resolver problemas encontrados</li>",
              "<li><strong>Re-testing:</strong> Validar que todo funciona correctamente</li>",
              "</ol>",
              "<p><strong>Herramientas del workflow:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Storybook:</strong> Desarrollo y documentaci√≥n de componentes</li>",
              "<li><strong>Chromatic:</strong> Testing visual automatizado</li>",
              "<li><strong>axe-core:</strong> Testing de accesibilidad</li>",
              "<li><strong>Playwright:</strong> Testing end-to-end con capturas</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-bash"># Setup del proyecto con testing\nnpm install --save-dev @storybook/react @storybook/addon-essentials\nnpm install --save-dev @axe-core/playwright @playwright/test\nnpm install --save-dev chromatic\n\n# Inicializar Storybook\nnpx storybook@latest init\n\n# Configurar Playwright\nnpx playwright install\n\n# Scripts en package.json\n{\n  "scripts": {\n    "storybook": "storybook dev -p 6006",\n    "build-storybook": "storybook build",\n    "test:visual": "playwright test tests/visual",\n    "test:a11y": "playwright test tests/accessibility", \n    "test:ui": "npm run test:visual && npm run test:a11y",\n    "chromatic": "chromatic --exit-zero-on-changes"\n  }\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// Ejercicio: ProductCard completo y accesible\ninterface ProductCardProps {\n  product: {\n    id: number;\n    name: string;\n    price: number;\n    originalPrice?: number;\n    image: string;\n    rating: number;\n    reviewCount: number;\n    isOnSale?: boolean;\n    isOutOfStock?: boolean;\n  };\n  onAddToCart: (productId: number) =&gt; void;\n  onViewDetails: (productId: number) =&gt; void;\n}\n\nexport function ProductCard({ product, onAddToCart, onViewDetails }: ProductCardProps) {\n  const { name, price, originalPrice, image, rating, reviewCount, isOnSale, isOutOfStock } = product;\n  \n  return (\n    &lt;article \n      className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-200"\n      aria-labelledby={`product-${product.id}-name`}\n    &gt;\n      {/* Imagen del producto */}\n      &lt;div className="relative aspect-square bg-gray-100"&gt;\n        &lt;img\n          src={image}\n          alt={`${name} - Imagen del producto`}\n          className="w-full h-full object-cover"\n          loading="lazy"\n        /&gt;\n        \n        {/* Badges */}\n        {isOnSale && (\n          &lt;span \n            className="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded text-sm font-medium"\n            aria-label="En oferta"\n          &gt;\n            Oferta\n          &lt;/span&gt;\n        )}\n        \n        {isOutOfStock && (\n          &lt;div \n            className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center"\n            aria-label="Sin stock"\n          &gt;\n            &lt;span className="text-white font-medium"&gt;Sin Stock&lt;/span&gt;\n          &lt;/div&gt;\n        )}\n      &lt;/div&gt;\n      \n      {/* Contenido */}\n      &lt;div className="p-4"&gt;\n        &lt;h3 \n          id={`product-${product.id}-name`}\n          className="font-semibold text-lg mb-2 text-gray-900 line-clamp-2"\n        &gt;\n          {name}\n        &lt;/h3&gt;\n        \n        {/* Rating */}\n        &lt;div className="flex items-center mb-2" role="img" aria-label={`${rating} de 5 estrellas, ${reviewCount} rese√±as`}&gt;\n          &lt;div className="flex text-yellow-400"&gt;\n            {[...Array(5)].map((_, i) =&gt; (\n              &lt;Star\n                key={i}\n                className={`w-4 h-4 ${\n                  i &lt; Math.floor(rating) ? "fill-current" : "fill-gray-300"\n                }`}\n                aria-hidden="true"\n              /&gt;\n            ))}\n          &lt;/div&gt;\n          &lt;span className="ml-2 text-sm text-gray-600"&gt;\n            ({reviewCount})\n          &lt;/span&gt;\n        &lt;/div&gt;\n        \n        {/* Precio */}\n        &lt;div className="mb-4"&gt;\n          &lt;span className="text-xl font-bold text-green-600"&gt;\n            ${price.toFixed(2)}\n          &lt;/span&gt;\n          {originalPrice && originalPrice &gt; price && (\n            &lt;span className="ml-2 text-sm text-gray-500 line-through"&gt;\n              ${originalPrice.toFixed(2)}\n            &lt;/span&gt;\n          )}\n        &lt;/div&gt;\n        \n        {/* Botones */}\n        &lt;div className="flex gap-2"&gt;\n          &lt;button\n            onClick={() =&gt; onAddToCart(product.id)}\n            disabled={isOutOfStock}\n            className={\n              `flex-1 py-2 px-4 rounded font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n                isOutOfStock\n                  ? "bg-gray-300 text-gray-500 cursor-not-allowed"\n                  : "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500"\n              }`\n            }\n            aria-describedby={isOutOfStock ? `product-${product.id}-stock-status` : undefined}\n          &gt;\n            {isOutOfStock ? "Sin Stock" : "Agregar al Carrito"}\n          &lt;/button&gt;\n          \n          &lt;button\n            onClick={() =&gt; onViewDetails(product.id)}\n            className="px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors"\n            aria-label={`Ver detalles de ${name}`}\n          &gt;\n            Ver Detalles\n          &lt;/button&gt;\n        &lt;/div&gt;\n        \n        {/* Mensaje de estado oculto para lectores de pantalla */}\n        {isOutOfStock && (\n          &lt;p id={`product-${product.id}-stock-status`} className="sr-only"&gt;\n            Este producto est√° agotado y no se puede agregar al carrito\n          &lt;/p&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/article&gt;\n  );\n}</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "‚öôÔ∏è",
        title: "M√≥dulo 8: Workflows y Despliegue",
        shortTitle: "DevOps",
        objective: "Establecer workflows de desarrollo eficientes con CI/CD, monitoring y analytics.",
        completed: false,
        sections: [
          {
            title: "8.1 Setup de Desarrollo Local",
            content: [
              "<p><strong>Configuraci√≥n de VS Code para React/TypeScript</strong></p>",
              "<p><em>Como configurar tu IDE para backend, pero optimizado para desarrollo frontend. VS Code es el est√°ndar para React/TypeScript.</em></p>",
              "<p><strong>Extensions esenciales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>ES7+ React/Redux/React-Native snippets:</strong> Snippets para componentes</li>",
              "<li><strong>TypeScript Importer:</strong> Auto-import de tipos y funciones</li>",
              "<li><strong>Tailwind CSS IntelliSense:</strong> Autocompletado de clases CSS</li>",
              "<li><strong>Auto Rename Tag:</strong> Renombra tags HTML autom√°ticamente</li>",
              "<li><strong>Bracket Pair Colorizer:</strong> Colores para brackets anidados</li>",
              "<li><strong>GitLens:</strong> Git integrado mejorado</li>",
              "</ul>",
              "<p><strong>Configuraci√≥n de ESLint y Prettier:</strong> Para c√≥digo consistente</p>",
              "<p><em>Como usar un linter en backend (ej: ESLint para Node.js), pero adaptado para React y TypeScript. Prettier formatea autom√°ticamente.</em></p>",
              "<p><strong>Hot reload y desarrollo eficiente:</strong></p>",
              "<p><em>Como nodemon en backend, pero para frontend. Los cambios se reflejan instant√°neamente sin perder estado.</em></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-json">// .vscode/settings.json - Configuraci√≥n de VS Code\n{\n  "editor.formatOnSave": true,\n  "editor.defaultFormatter": "esbenp.prettier-vscode",\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": "explicit",\n    "source.organizeImports": "explicit"\n  },\n  "typescript.preferences.importModuleSpecifier": "relative",\n  "emmet.includeLanguages": {\n    "typescript": "html",\n    "typescriptreact": "html"\n  },\n  "tailwindCSS.includeLanguages": {\n    "typescript": "html",\n    "typescriptreact": "html"\n  },\n  "files.associations": {\n    "*.css": "tailwindcss"\n  }\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-javascript">// eslint.config.mjs - Configuraci√≥n de ESLint\nimport js from "@eslint/js";\nimport globals from "globals";\nimport reactHooks from "eslint-plugin-react-hooks";\nimport reactRefresh from "eslint-plugin-react-refresh";\nimport tseslint from "typescript-eslint";\n\nexport default tseslint.config(\n  { ignores: ["dist"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ["**/*.{ts,tsx}"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      "react-hooks": reactHooks,\n      "react-refresh": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      "react-refresh/only-export-components": [\n        "warn",\n        { allowConstantExport: true },\n      ],\n      "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }],\n      "@typescript-eslint/explicit-function-return-type": "off",\n      "@typescript-eslint/explicit-module-boundary-types": "off",\n      "@typescript-eslint/no-explicit-any": "warn",\n    },\n  },\n);\n\n// prettier.config.mjs - Configuraci√≥n de Prettier\nexport default {\n  semi: true,\n  singleQuote: false,\n  tabWidth: 2,\n  trailingComma: "es5",\n  printWidth: 100,\n  plugins: ["prettier-plugin-tailwindcss"],\n};</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-json">// package.json - Scripts de desarrollo\n{\n  "scripts": {\n    "dev": "next dev",\n    "build": "next build", \n    "start": "next start",\n    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",\n    "lint:fix": "eslint . --ext ts,tsx --fix",\n    "type-check": "tsc --noEmit",\n    "format": "prettier --write \\"src/**/*.{ts,tsx,js,jsx,json,css,md}\\"",\n    "format:check": "prettier --check \\"src/**/*.{ts,tsx,js,jsx,json,css,md}\\"",\n    "test": "vitest",\n    "test:ui": "vitest --ui",\n    "test:coverage": "vitest --coverage"\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged"\n    }\n  },\n  "lint-staged": {\n    "*.{ts,tsx}": [\n      "eslint --fix",\n      "prettier --write"\n    ],\n    "*.{json,css,md}": [\n      "prettier --write"\n    ]\n  }\n}</code></pre></div>',
            ],
          },
          {
            title: "8.2 CI/CD Pipeline",
            content: [
              "<p><strong>GitHub Actions b√°sico:</strong> Automatizaci√≥n de testing y despliegue</p>",
              "<p><em>Como CI/CD en backend con Jenkins o GitHub Actions, pero para aplicaciones frontend. Autom√°tico en cada push.</em></p>",
              "<p><strong>Pipeline t√≠pico:</strong> Lint ‚Üí Type Check ‚Üí Test ‚Üí Build ‚Üí Deploy</p>",
              "<p><em>Como tu pipeline de backend: validaciones ‚Üí tests ‚Üí build ‚Üí deploy, pero adaptado para Next.js y frontend.</em></p>",
              "<p><strong>Preview deployments:</strong> Revisi√≥n de cambios antes de mergear</p>",
              "<p><em>Como tener un ambiente de staging autom√°tico para cada PR. Muy √∫til para revisar cambios visuales.</em></p>",
              "<p><strong>Despliegue autom√°tico a Vercel:</strong></p>",
              "<p><em>Vercel se conecta a tu repo y deploya autom√°ticamente. Como Heroku para backend, pero optimizado para frontend.</em></p>",
              "<p><strong>Ventajas del CI/CD en frontend:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ Deployment autom√°tico en cada merge a main</li>",
              "<li>‚úÖ Preview URLs para cada Pull Request</li>",
              "<li>‚úÖ Tests autom√°ticos antes del deploy</li>",
              "<li>‚úÖ Rollback f√°cil si algo sale mal</li>",
              "<li>‚úÖ Optimizaciones autom√°ticas (minify, tree-shaking)</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-yaml"># .github/workflows/ci.yml - GitHub Actions CI/CD\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: "npm"\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Run ESLint\n      run: npm run lint\n      \n    - name: Check TypeScript\n      run: npm run type-check\n      \n    - name: Check Prettier formatting\n      run: npm run format:check\n      \n    - name: Run tests\n      run: npm run test:coverage\n      \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        token: ${{ secrets.CODECOV_TOKEN }}\n        \n    - name: Build application\n      run: npm run build\n      env:\n        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}\n        \n    - name: Run E2E tests\n      run: npm run test:e2e\n      \n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == \'refs/heads/main\' && github.event_name == \'push\'\n    \n    steps:\n    - name: Deploy to Vercel\n      uses: amondnet/vercel-action@v20\n      with:\n        vercel-token: ${{ secrets.VERCEL_TOKEN }}\n        vercel-org-id: ${{ secrets.ORG_ID }}\n        vercel-project-id: ${{ secrets.PROJECT_ID }}\n        vercel-args: "--prod"</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-yaml"># .github/workflows/preview.yml - Preview Deployments\nname: Preview Deployment\n\non:\n  pull_request:\n    branches: [ main ]\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: "20.x"\n        cache: "npm"\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Build for preview\n      run: npm run build\n      env:\n        NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}\n        \n    - name: Deploy preview to Vercel\n      uses: amondnet/vercel-action@v20\n      id: vercel-deployment\n      with:\n        vercel-token: ${{ secrets.VERCEL_TOKEN }}\n        vercel-org-id: ${{ secrets.ORG_ID }}\n        vercel-project-id: ${{ secrets.PROJECT_ID }}\n        github-comment: true\n        \n    - name: Run Lighthouse CI\n      uses: treosh/lighthouse-ci-action@v9\n      with:\n        urls: |\n          ${{ steps.vercel-deployment.outputs.preview-url }}\n        uploadDir: "./lighthouse-reports"\n        temporaryPublicStorage: true</code></pre></div>',
            ],
          },
          {
            title: "8.3 Monitoring y Analytics",
            content: [
              "<p><strong>Sentry para error tracking:</strong></p>",
              "<p><em>Como logs centralizados en backend (ej: Winston + ELK), pero para errores de frontend. Captura errores JavaScript y los reporta.</em></p>",
              "<p><strong>Google Analytics 4 b√°sico:</strong></p>",
              "<p><em>Como m√©tricas de uso de tu API, pero para comportamiento de usuarios en tu frontend. P√°ginas vistas, clics, conversiones.</em></p>",
              "<p><strong>Performance monitoring con Web Vitals:</strong></p>",
              "<p><em>Como monitorear performance de tu API (tiempo de respuesta, throughput), pero para frontend (tiempo de carga, interactividad).</em></p>",
              "<p><strong>M√©tricas importantes para frontend:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li><strong>Core Web Vitals:</strong> LCP, FID, CLS (Google ranking factors)</li>",
              "<li><strong>Error Rate:</strong> Porcentaje de errores JavaScript</li>",
              "<li><strong>Performance:</strong> Tiempo de carga de p√°ginas</li>",
              "<li><strong>User Behavior:</strong> Flujos de navegaci√≥n, conversiones</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/sentry.ts - Configuraci√≥n de Sentry\nimport * as Sentry from "@sentry/nextjs";\n\nSentry.init({\n  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n  integrations: [\n    new Sentry.BrowserTracing({\n      // Set sampling rate for performance monitoring\n      tracePropagationTargets: ["localhost", /^https:\\/\\/api\\.myapp\\.com/],\n    }),\n    new Sentry.Replay({\n      // Capture 10% of all sessions,\n      // plus 100% of sessions with an error\n      sessionSampleRate: 0.1,\n      errorSampleRate: 1.0,\n    }),\n  ],\n  tracesSampleRate: process.env.NODE_ENV === "production" ? 0.1 : 1.0,\n  debug: process.env.NODE_ENV === "development",\n  replaysOnErrorSampleRate: 1.0,\n  \n  beforeSend(event, hint) {\n    // Filter out known issues\n    if (event.exception) {\n      const error = hint.originalException;\n      if (error && error.message && error.message.includes("Non-Error promise rejection")) {\n        return null;\n      }\n    }\n    return event;\n  },\n});\n\n// Custom error logging\nexport function logError(error: Error, context?: Record&lt;string, any&gt;) {\n  console.error("Error:", error);\n  \n  Sentry.withScope((scope) =&gt; {\n    if (context) {\n      Object.keys(context).forEach(key =&gt; {\n        scope.setContext(key, context[key]);\n      });\n    }\n    Sentry.captureException(error);\n  });\n}\n\n// Performance monitoring\nexport function trackPerformance(name: string, fn: () =&gt; Promise&lt;any&gt;) {\n  const transaction = Sentry.startTransaction({\n    name,\n    op: "function",\n  });\n  \n  return fn().finally(() =&gt; {\n    transaction.finish();\n  });\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/analytics.ts - Google Analytics 4\nimport { GoogleAnalytics } from "nextjs-google-analytics";\n\n// Configuraci√≥n GA4\nexport const GA_TRACKING_ID = process.env.NEXT_PUBLIC_GA_ID;\n\n// Tipos de eventos\ntype GtagEventAction = "login" | "sign_up" | "purchase" | "add_to_cart" | "custom";\n\ntype GtagEventParams = {\n  action: GtagEventAction;\n  category?: string;\n  label?: string;\n  value?: number;\n  [key: string]: any;\n};\n\n// Track page views\nexport function trackPageView(url: string, title: string) {\n  if (typeof window !== "undefined" && window.gtag) {\n    window.gtag("config", GA_TRACKING_ID, {\n      page_title: title,\n      page_location: url,\n    });\n  }\n}\n\n// Track custom events\nexport function trackEvent({ action, category, label, value, ...params }: GtagEventParams) {\n  if (typeof window !== "undefined" && window.gtag) {\n    window.gtag("event", action, {\n      event_category: category,\n      event_label: label,\n      value: value,\n      ...params,\n    });\n  }\n}\n\n// E-commerce tracking\nexport function trackPurchase(transactionId: string, items: any[], total: number) {\n  trackEvent({\n    action: "purchase",\n    transaction_id: transactionId,\n    value: total,\n    currency: "USD",\n    items: items.map(item =&gt; ({\n      item_id: item.id,\n      item_name: item.name,\n      category: item.category,\n      quantity: item.quantity,\n      price: item.price,\n    })),\n  });\n}\n\n// Hook para tracking autom√°tico\nexport function useAnalytics() {\n  const trackButtonClick = useCallback((buttonName: string, location: string) =&gt; {\n    trackEvent({\n      action: "custom",\n      category: "UI",\n      label: `Button: ${buttonName}`,\n      location,\n    });\n  }, []);\n  \n  const trackFormSubmission = useCallback((formName: string, success: boolean) =&gt; {\n    trackEvent({\n      action: "custom",\n      category: "Form",\n      label: `Form: ${formName}`,\n      success,\n    });\n  }, []);\n  \n  return {\n    trackButtonClick,\n    trackFormSubmission,\n    trackPageView,\n    trackPurchase,\n  };\n}</code></pre></div>',
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code class="language-typescript">// lib/performance.ts - Web Vitals monitoring\nimport { getCLS, getFCP, getFID, getLCP, getTTFB } from "web-vitals";\n\n// Send metrics to analytics\nfunction sendToAnalytics(metric: any) {\n  // Send to Google Analytics\n  if (typeof window !== "undefined" && window.gtag) {\n    window.gtag("event", metric.name, {\n      event_category: "Web Vitals",\n      event_label: metric.id,\n      value: Math.round(metric.name === "CLS" ? metric.value * 1000 : metric.value),\n      non_interaction: true,\n    });\n  }\n  \n  // Send to custom analytics endpoint\n  fetch("/api/analytics/web-vitals", {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({\n      name: metric.name,\n      value: metric.value,\n      id: metric.id,\n      url: window.location.href,\n      timestamp: Date.now(),\n    }),\n  }).catch(console.error);\n}\n\n// Initialize Web Vitals tracking\nexport function initWebVitals() {\n  getCLS(sendToAnalytics);\n  getFCP(sendToAnalytics);\n  getFID(sendToAnalytics);\n  getLCP(sendToAnalytics);\n  getTTFB(sendToAnalytics);\n}\n\n// Custom performance hook\nexport function usePerformanceMonitoring() {\n  const measureOperation = useCallback(async &lt;T&gt;(\n    operationName: string,\n    operation: () =&gt; Promise&lt;T&gt;\n  ): Promise&lt;T&gt; =&gt; {\n    const startTime = performance.now();\n    \n    try {\n      const result = await operation();\n      const duration = performance.now() - startTime;\n      \n      // Log performance metric\n      console.log(`${operationName} took ${duration.toFixed(2)}ms`);\n      \n      // Send to analytics if duration is significant\n      if (duration &gt; 100) {\n        trackEvent({\n          action: "custom",\n          category: "Performance",\n          label: operationName,\n          value: Math.round(duration),\n        });\n      }\n      \n      return result;\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      logError(error as Error, {\n        operation: operationName,\n        duration: duration,\n      });\n      throw error;\n    }\n  }, []);\n  \n  return { measureOperation };\n}</code></pre></div>',
            ],
          },
        ],
      },
      {
        emoji: "ü§ñ",
        title: "M√≥dulo 9: IA-Driven Frontend Development",
        shortTitle: "IA-Driven",
        objective:
          "Dominar el desarrollo frontend potenciado por IA: desde dise√±o hasta testing autom√°tico y deployment inteligente.",
        completed: false,
        sections: [
          {
            title: "9.1 Introducci√≥n al IA-Driven Frontend Development",
            content: [
              "<p><strong>üéØ El Nuevo Paradigma del Desarrollo Frontend</strong></p>",
              "<p><em>Como desarrollador backend, ya conoces la eficiencia de las herramientas. Ahora aplicaremos IA para acelerar 10x el desarrollo frontend manteniendo calidad profesional.</em></p>",
              "<p><strong>¬øQu√© es IA-Driven Development?</strong></p>",
              "<p><em>Es integrar herramientas de IA en cada fase del desarrollo: desde ideaci√≥n hasta deployment. Como tener un senior developer que te asiste 24/7.</em></p>",
              "<p><strong>Herramientas del Stack IA-Frontend 2025:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üé® v0.dev:</strong> Generaci√≥n de interfaces desde prompts naturales</li>",
              "<li><em>Convierte 'Necesito un e-commerce moderno' en c√≥digo React completo en minutos.</em></li>",
              "<li><strong>üíª GitHub Copilot:</strong> Par programming inteligente</li>",
              "<li><em>Como pair programming con un experto React/TypeScript que sugiere c√≥digo en tiempo real.</em></li>",
              "<li><strong>üß™ AI Visual Testing:</strong> Testing autom√°tico de UI</li>",
              "<li><em>Detecta cambios visuales, problemas de accesibilidad y regresiones autom√°ticamente.</em></li>",
              "<li><strong>üñºÔ∏è AI Assets:</strong> Generaci√≥n de im√°genes, iconos y content</li>",
              "<li><em>Crea assets optimizados sin depender de dise√±adores para prototipos.</em></li>",
              "<li><strong>üìä AI Analytics:</strong> Insights autom√°ticos de performance</li>",
              "<li><em>An√°lisis inteligente de Core Web Vitals y recomendaciones de optimizaci√≥n.</em></li>",
              "</ul>",
              "<p><strong>Beneficios Medibles:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚ö° <strong>10x m√°s r√°pido:</strong> De idea a MVP funcional en d√≠as, no semanas</li>",
              "<li>üéØ <strong>95%+ calidad:</strong> Testing y validaciones autom√°ticas</li>",
              "<li>‚ôø <strong>100% accesible:</strong> Cumplimiento WCAG autom√°tico</li>",
              "<li>üöÄ <strong>Performance √≥ptimo:</strong> Optimizaciones autom√°ticas</li>",
              "<li>üìö <strong>Documentaci√≥n completa:</strong> Generada autom√°ticamente</li>",
              "</ul>",
              "<p><strong>Mindset Shift Necesario:</strong></p>",
              "<p><em>De 'escribir todo el c√≥digo' a 'dirigir y validar la IA'. Como pasar de SQL manual a ORM inteligente.</em></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ <strong>Prompt Engineering:</strong> Saber pedir lo que necesitas</li>",
              "<li>‚úÖ <strong>Validaci√≥n Cr√≠tica:</strong> Revisar y refinar el output de IA</li>",
              "<li>‚úÖ <strong>Iteraci√≥n R√°pida:</strong> Prototipar ‚Üí Validar ‚Üí Mejorar</li>",
              "<li>‚úÖ <strong>Quality Gates:</strong> Automatizar revisiones de calidad</li>",
              "</ul>",
              '<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">',
              '<p class="text-blue-800"><strong>üí° Paradigma IA-First:</strong></p>',
              "<p class=\"text-blue-700\">En lugar de 'C√≥mo codifico esto?' preg√∫ntate 'C√≥mo le pido a la IA que me ayude a construir esto de forma √≥ptima?'</p>",
              "</div>",
            ],
          },
          {
            title: "9.2 v0.dev: Dise√±o y Wireframing con IA",
            content: [
              "<p><strong>üé® v0.dev: De Idea a Interfaz en Minutos</strong></p>",
              "<p><em>Como generar APIs con c√≥digo, pero para interfaces. v0.dev convierte descripciones naturales en componentes React funcionales.</em></p>",
              "<p><strong>¬øQu√© es v0.dev?</strong></p>",
              "<p><em>Herramienta de Vercel que genera interfaces React con Tailwind CSS desde prompts en lenguaje natural. Es como tener un frontend developer senior trabajando para ti.</em></p>",
              "<p><strong>Casos de Uso Ideales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üöÄ Prototipado R√°pido:</strong> De idea a wireframe funcional en minutos</li>",
              "<li><strong>üéØ MVP Development:</strong> Interfaces completas para validar conceptos</li>",
              "<li><strong>üîÑ Iteraci√≥n de Dise√±o:</strong> Probar variantes visuales r√°pidamente</li>",
              "<li><strong>üìö Aprendizaje:</strong> Ver c√≥mo se implementan patrones UI complejos</li>",
              "</ul>",
              "<p><strong>Anatom√≠a de un Prompt Efectivo:</strong></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code># Template de Prompt para v0.dev\n\n## Contexto\n[Tipo de aplicaci√≥n y audiencia]\n\n## Componente Espec√≠fico\n[Qu√© componente necesitas]\n\n## Funcionalidades\n- [Lista espec√≠fica de caracter√≠sticas]\n- [Estados y interacciones]\n- [Casos edge]\n\n## Estilo y UX\n- [Paleta de colores]\n- [Tipograf√≠a y espaciado]\n- [Responsive behavior]\n- [Animaciones sutiles]\n\n## Especificaciones T√©cnicas\n- [Props esperadas]\n- [Accesibilidad requerida]\n- [Performance considerations]</code></pre></div>',
              "<p><strong>Ejemplo: E-commerce Product Card</strong></p>",
              '<div class="bg-green-50 border border-green-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-green-800">Prompt Ejemplo:</p>',
              '<p class="text-green-700 mt-2">"Crea una ProductCard para e-commerce moderno con imagen del producto, nombre, precio original y con descuento, rating con estrellas, bot√≥n de agregar al carrito con loading state, bot√≥n de favoritos, badge de descuento si aplica. Dise√±o limpio con hover effects sutiles, responsive para mobile. Usar Tailwind CSS y ser accesible WCAG 2.1."</p>',
              "</div>",
              "<p><strong>Flujo de Trabajo Optimizado:</strong></p>",
              "<ol class='list-decimal pl-6 space-y-2'>",
              "<li><strong>Ideaci√≥n:</strong> Definir funcionalidad y UX requirements</li>",
              "<li><strong>Prompt Engineering:</strong> Crear prompt espec√≠fico y completo</li>",
              "<li><strong>Generaci√≥n:</strong> Obtener c√≥digo base de v0.dev</li>",
              "<li><strong>Refinamiento:</strong> Iterar con prompts de mejora</li>",
              "<li><strong>Integraci√≥n:</strong> Adaptar c√≥digo a tu proyecto</li>",
              "<li><strong>Testing:</strong> Validar funcionalidad y accesibilidad</li>",
              "</ol>",
              "<p><strong>Mejores Pr√°cticas v0.dev:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ <strong>S√© espec√≠fico:</strong> Detalles claros sobre funcionalidad y estilo</li>",
              "<li>‚úÖ <strong>Incluye contexto:</strong> Tipo de app, audiencia, casos de uso</li>",
              "<li>‚úÖ <strong>Menciona accesibilidad:</strong> Siempre incluir requisitos WCAG</li>",
              "<li>‚úÖ <strong>Especifica responsive:</strong> Comportamiento en mobile/desktop</li>",
              "<li>‚úÖ <strong>Itera gradualmente:</strong> Mejoras paso a paso, no todo junto</li>",
              "</ul>",
              "<p><strong>Limitaciones y Consideraciones:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚ö†Ô∏è <strong>C√≥digo base inicial:</strong> Siempre revisar y refactorizar</li>",
              "<li>‚ö†Ô∏è <strong>L√≥gica compleja:</strong> Mejor para UI, no para business logic</li>",
              "<li>‚ö†Ô∏è <strong>Consistency:</strong> Adaptar al design system existente</li>",
              "<li>‚ö†Ô∏è <strong>Performance:</strong> Optimizar el c√≥digo generado</li>",
              "</ul>",
            ],
          },
          {
            title: "9.3 GitHub Copilot: Generaci√≥n de C√≥digo Inteligente",
            content: [
              "<p><strong>üíª GitHub Copilot: Tu Pair Programming IA</strong></p>",
              "<p><em>Como IntelliSense pero exponencialmente m√°s inteligente. Copilot entiende contexto, patrones y mejores pr√°cticas para generar c√≥digo React/TypeScript de calidad.</em></p>",
              "<p><strong>Configuraci√≥n √ìptima para Frontend:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üîß VS Code Extensions:</strong> GitHub Copilot + Copilot Chat</li>",
              "<li><strong>‚öôÔ∏è Settings:</strong> Configurar para React/TypeScript/Tailwind</li>",
              "<li><strong>üéØ Context Awareness:</strong> Aprovechar archivos abiertos para contexto</li>",
              "<li><strong>üí¨ Copilot Chat:</strong> Para refactoring y debugging asistido</li>",
              "</ul>",
              "<p><strong>Estrategias de Prompting para Frontend:</strong></p>",
              "<div class=\"bg-gray-900 rounded p-4 my-4\"><pre><code>// 1. Comentarios descriptivos antes del c√≥digo\n// Create a responsive product card component with:\n// - Image with lazy loading\n// - Product name, price, and rating\n// - Add to cart button with loading state\n// - Accessible markup following WCAG 2.1\n// - Hover animations using Tailwind CSS\n\nfunction ProductCard({ product, onAddToCart, isLoading }) {\n  // Copilot generar√° el componente completo\n}\n\n// 2. Usar TypeScript interfaces para contexto\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'user';\n}\n\n// Crear hook para gesti√≥n de usuarios con CRUD operations\nfunction useUsers() {\n  // Copilot infiere el patr√≥n y genera el hook completo\n}</code></pre></div>",
              "<p><strong>Patrones de C√≥digo que Copilot Domina:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üé£ Custom Hooks:</strong> useLocalStorage, useApi, useDebounce</li>",
              "<li><strong>üìù Form Handling:</strong> react-hook-form + zod validation</li>",
              "<li><strong>üé® Component Variants:</strong> Button, Card, Modal con props tipadas</li>",
              "<li><strong>üîÑ State Management:</strong> Zustand stores y Context providers</li>",
              "<li><strong>üåê API Integration:</strong> Fetch wrappers y error handling</li>",
              "<li><strong>üß™ Testing:</strong> Unit tests con Testing Library</li>",
              "</ul>",
              "<p><strong>Copilot Chat: Casos de Uso Avanzados</strong></p>",
              '<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-blue-800">Prompts Efectivos para Copilot Chat:</p>',
              '<ul class="text-blue-700 mt-2 space-y-1">',
              '<li>‚Ä¢ "Refactoriza este componente para usar React.memo y useCallback"</li>',
              '<li>‚Ä¢ "Agrega validaci√≥n con Zod a este formulario"</li>',
              '<li>‚Ä¢ "Convierte este CSS a clases de Tailwind manteniendo el dise√±o"</li>',
              '<li>‚Ä¢ "Genera tests unitarios para este custom hook"</li>',
              '<li>‚Ä¢ "Optimiza este componente para mejor performance"</li>',
              "</ul>",
              "</div>",
              "<p><strong>Workflow de Desarrollo con Copilot:</strong></p>",
              "<ol class='list-decimal pl-6 space-y-2'>",
              "<li><strong>üìã Definir Interface:</strong> TypeScript types primero</li>",
              "<li><strong>üìù Comentario Descriptivo:</strong> Explicar funcionalidad esperada</li>",
              "<li><strong>‚ö° Generaci√≥n:</strong> Dejar que Copilot genere c√≥digo base</li>",
              "<li><strong>üîç Revisi√≥n:</strong> Validar l√≥gica y mejores pr√°cticas</li>",
              "<li><strong>‚ú® Refinamiento:</strong> Usar Chat para mejoras espec√≠ficas</li>",
              "<li><strong>üß™ Testing:</strong> Generar tests con Copilot</li>",
              "</ol>",
              "<p><strong>Mejores Pr√°cticas:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ <strong>Context First:</strong> Proporcionar interfaces y types</li>",
              "<li>‚úÖ <strong>Specific Comments:</strong> Comentarios detallados sobre funcionalidad</li>",
              "<li>‚úÖ <strong>Incremental:</strong> Construir funci√≥n por funci√≥n</li>",
              "<li>‚úÖ <strong>Review Always:</strong> Nunca aceptar c√≥digo sin revisar</li>",
              "<li>‚úÖ <strong>Test Generation:</strong> Usar para generar tests comprehensivos</li>",
              "</ul>",
              "<p><strong>Limitaciones y Cuidados:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚ö†Ô∏è <strong>Security:</strong> Revisar manejo de datos sensibles</li>",
              "<li>‚ö†Ô∏è <strong>Performance:</strong> Validar optimizaciones propuestas</li>",
              "<li>‚ö†Ô∏è <strong>Accessibility:</strong> Verificar cumplimiento WCAG</li>",
              "<li>‚ö†Ô∏è <strong>Dependencies:</strong> Confirmar versiones y compatibilidad</li>",
              "</ul>",
            ],
          },
          {
            title: "9.4 AI Visual Testing y Quality Assurance",
            content: [
              "<p><strong>üß™ Testing Autom√°tico con IA: Calidad Sin Esfuerzo Manual</strong></p>",
              "<p><em>Como testing automatizado en backend, pero para UI. La IA detecta cambios visuales, problemas de accesibilidad y regresiones sin intervenci√≥n manual.</em></p>",
              "<p><strong>Stack de AI Testing Moderno:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üé≠ Playwright AI:</strong> Testing E2E con detecci√≥n inteligente</li>",
              "<li><strong>üì∏ Chromatic:</strong> Visual regression testing autom√°tico</li>",
              "<li><strong>‚ôø axe-core AI:</strong> Auditor√≠a de accesibilidad automatizada</li>",
              "<li><strong>‚ö° Lighthouse CI:</strong> Performance testing continuo</li>",
              "<li><strong>ü§ñ AI Test Generation:</strong> Tests generados desde comportamiento de usuario</li>",
              "</ul>",
              "<p><strong>Configuraci√≥n de Testing Pipeline IA:</strong></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code># package.json - Scripts de testing IA\n{\n  "scripts": {\n    "test:visual": "chromatic --exit-zero-on-changes",\n    "test:a11y": "axe-cli --playwright",\n    "test:e2e": "playwright test --ai-assisted",\n    "test:performance": "lighthouse-ci autorun",\n    "test:ai-full": "npm run test:visual && npm run test:a11y && npm run test:e2e",\n    "test:generate": "playwright codegen --ai-enhance"\n  }\n}</code></pre></div>',
              "<p><strong>AI Visual Testing: Chromatic + Storybook</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üì∏ Baseline Autom√°tico:</strong> Screenshots de referencia inteligentes</li>",
              "<li><strong>üîç Detecci√≥n de Cambios:</strong> IA identifica cambios significativos vs. ruido</li>",
              "<li><strong>üéØ Smart Diffing:</strong> Ignora cambios menores, resalta problemas reales</li>",
              "<li><strong>üì± Cross-Browser:</strong> Testing autom√°tico en m√∫ltiples navegadores</li>",
              "<li><strong>üîÑ CI Integration:</strong> Bloquea deploys con regresiones visuales</li>",
              "</ul>",
              "<p><strong>AI Accessibility Testing:</strong></p>",
              '<div class="bg-green-50 border border-green-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-green-800">Testing WCAG 2.1 AA Automatizado:</p>',
              '<ul class="text-green-700 mt-2 space-y-1">',
              "<li>‚Ä¢ <strong>Contraste:</strong> Verificaci√≥n autom√°tica de ratios de color</li>",
              "<li>‚Ä¢ <strong>Keyboard Nav:</strong> Testing de navegaci√≥n por teclado</li>",
              "<li>‚Ä¢ <strong>Screen Readers:</strong> Validaci√≥n de aria-labels y roles</li>",
              "<li>‚Ä¢ <strong>Focus Management:</strong> Orden l√≥gico de tab navigation</li>",
              "<li>‚Ä¢ <strong>Form Labels:</strong> Asociaci√≥n correcta de labels</li>",
              "</ul>",
              "</div>",
              "<p><strong>AI Test Generation: Del Comportamiento a Tests</strong></p>",
              "<div class=\"bg-gray-900 rounded p-4 my-4\"><pre><code>// Test generado autom√°ticamente por IA\n// Basado en user journey: \"Comprar producto como usuario\"\n\ntest('complete purchase flow', async ({ page }) => {\n  // IA detect√≥ este flujo del comportamiento real de usuarios\n  await page.goto('/products');\n  await page.getByRole('button', { name: /add to cart/i }).first().click();\n  await page.getByRole('link', { name: /cart/i }).click();\n  await page.getByRole('button', { name: /checkout/i }).click();\n  \n  // IA gener√≥ validaciones inteligentes\n  await expect(page.getByText(/order summary/i)).toBeVisible();\n  await expect(page.getByRole('button', { name: /place order/i })).toBeEnabled();\n});</code></pre></div>",
              "<p><strong>Performance Testing con IA:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üìä Core Web Vitals:</strong> Monitoreo autom√°tico de LCP, FID, CLS</li>",
              "<li><strong>üéØ AI Recommendations:</strong> Sugerencias espec√≠ficas de optimizaci√≥n</li>",
              "<li><strong>üìà Trending Analysis:</strong> Detecci√≥n de degradaci√≥n de performance</li>",
              "<li><strong>‚ö° Auto-Optimization:</strong> Aplicaci√≥n autom√°tica de mejoras</li>",
              "</ul>",
              "<p><strong>Quality Gates Automatizados:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ <strong>Visual Regression:</strong> 0 cambios no intencionales</li>",
              "<li>‚úÖ <strong>Accessibility Score:</strong> 95%+ WCAG 2.1 AA</li>",
              "<li>‚úÖ <strong>Performance Budget:</strong> LCP < 2.5s, FID < 100ms</li>",
              "<li>‚úÖ <strong>Cross-Browser:</strong> Funcional en Chrome, Firefox, Safari</li>",
              "<li>‚úÖ <strong>Mobile Responsive:</strong> UX optimizada en dispositivos m√≥viles</li>",
              "</ul>",
              "<p><strong>Workflow Completo de QA con IA:</strong></p>",
              "<ol class='list-decimal pl-6 space-y-2'>",
              "<li><strong>üöÄ Pre-Commit:</strong> Tests unitarios y linting autom√°tico</li>",
              "<li><strong>üì∏ PR Review:</strong> Visual testing y accessibility check</li>",
              "<li><strong>üß™ Staging:</strong> E2E testing completo con IA</li>",
              "<li><strong>‚ö° Performance:</strong> Lighthouse audit autom√°tico</li>",
              "<li><strong>üéØ Production:</strong> Monitoring continuo con alertas IA</li>",
              "</ol>",
            ],
          },
          {
            title: "9.5 AI Asset Generation y Optimizaci√≥n",
            content: [
              "<p><strong>üñºÔ∏è Generaci√≥n Inteligente de Assets: Im√°genes, Iconos y Content</strong></p>",
              "<p><em>Como tener un dise√±ador y content creator trabajando 24/7. IA genera y optimiza todos los assets visuales que necesitas para tu frontend.</em></p>",
              "<p><strong>Stack de AI Asset Generation:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üé® Midjourney/DALL-E:</strong> Im√°genes personalizadas de alta calidad</li>",
              "<li><strong>üî§ Iconify AI:</strong> Iconos vectoriales personalizados</li>",
              "<li><strong>üìù ChatGPT/Claude:</strong> Copy, content y microcopy</li>",
              "<li><strong>üñºÔ∏è AI Image Optimization:</strong> Compresi√≥n y formato autom√°tico</li>",
              "<li><strong>üé≠ AI Avatar Generation:</strong> Perfiles de usuario realistas</li>",
              "</ul>",
              "<p><strong>Generaci√≥n de Im√°genes para Frontend:</strong></p>",
              '<div class="bg-purple-50 border border-purple-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-purple-800">Prompts Efectivos para E-commerce:</p>',
              '<div class="text-purple-700 mt-2 space-y-2">',
              '<p><strong>Hero Images:</strong> "Modern minimalist e-commerce hero section, clean white background, floating product, soft shadows, professional photography style, 16:9 aspect ratio"</p>',
              '<p><strong>Product Mockups:</strong> "iPhone mockup showing [tu app], realistic hands holding device, neutral background, professional lighting, marketing style"</p>',
              '<p><strong>Background Patterns:</strong> "Subtle geometric pattern for website background, light gray on white, minimal design, seamless tile"</p>',
              "</div>",
              "</div>",
              "<p><strong>Optimizaci√≥n Autom√°tica de Assets:</strong></p>",
              "<div class=\"bg-gray-900 rounded p-4 my-4\"><pre><code>// AI Asset Optimization Pipeline\nconst optimizeAssets = {\n  images: {\n    // Compresi√≥n inteligente basada en contenido\n    compression: 'smart', // IA detecta el nivel √≥ptimo\n    formats: ['webp', 'avif', 'jpg'], // Fallbacks autom√°ticos\n    sizes: [320, 640, 768, 1024, 1280], // Responsive autom√°tico\n    lazy: true, // Lazy loading autom√°tico\n  },\n  \n  icons: {\n    format: 'svg', // Vectorial para escalabilidad\n    optimization: 'aggressive', // Minificaci√≥n inteligente\n    inlining: 'critical', // Inline para iconos cr√≠ticos\n  },\n  \n  content: {\n    language: 'es', // Localizaci√≥n autom√°tica\n    tone: 'professional', // Consistencia de tono\n    seo: true, // Optimizaci√≥n para SEO\n  }\n};</code></pre></div>",
              "<p><strong>AI Icon Generation Workflow:</strong></p>",
              "<ol class='list-decimal pl-6 space-y-2'>",
              "<li><strong>üéØ Define Style:</strong> Consistent icon style (outline, filled, etc.)</li>",
              "<li><strong>üìù Batch Generation:</strong> Generar set completo de iconos</li>",
              "<li><strong>üîß Optimization:</strong> SVG optimization autom√°tico</li>",
              "<li><strong>üì¶ Integration:</strong> Icon component library autom√°tico</li>",
              "<li><strong>üé® Variants:</strong> Light/dark mode autom√°tico</li>",
              "</ol>",
              "<p><strong>Content Generation con IA:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üìù Microcopy:</strong> Botones, labels, mensajes de error</li>",
              "<li><strong>üìÑ Landing Pages:</strong> Headlines, descriptions, CTAs</li>",
              "<li><strong>üõçÔ∏è Product Descriptions:</strong> Descriptions convincentes y SEO-optimized</li>",
              "<li><strong>üìß Email Templates:</strong> Subject lines y copy personalizado</li>",
              "<li><strong>üîç SEO Content:</strong> Meta descriptions y alt texts</li>",
              "</ul>",
              '<div class="bg-green-50 border border-green-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-green-800">Ejemplo: Product Description Generator</p>',
              '<div class="text-green-700 mt-2">',
              '<p><strong>Input:</strong> "Smartphone, 128GB, c√°mara 48MP, bater√≠a 5000mAh"</p>',
              '<p><strong>Output AI:</strong> "Captura cada momento con perfecci√≥n gracias a su c√°mara de 48MP y disfruta de un d√≠a completo sin interrupciones con su bater√≠a de 5000mAh. Con 128GB de almacenamiento, tendr√°s espacio para todo lo que importa."</p>',
              "</div>",
              "</div>",
              "<p><strong>Asset Performance Optimization:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>üì± <strong>Responsive Images:</strong> Tama√±os autom√°ticos por dispositivo</li>",
              "<li>‚ö° <strong>Format Selection:</strong> WebP/AVIF con fallbacks inteligentes</li>",
              "<li>üéØ <strong>Critical Assets:</strong> Preload autom√°tico de assets cr√≠ticos</li>",
              "<li>üíæ <strong>CDN Optimization:</strong> Distribuci√≥n global autom√°tica</li>",
              "<li>üîÑ <strong>Cache Strategy:</strong> Headers de cache inteligentes</li>",
              "</ul>",
              "<p><strong>Herramientas y APIs Recomendadas:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>üé® <strong>Imagen:</strong> Midjourney API, DALL-E 3, Stable Diffusion</li>",
              "<li>üî§ <strong>Iconos:</strong> Heroicons AI, Iconify custom generation</li>",
              "<li>üìù <strong>Content:</strong> OpenAI GPT-4, Claude 3, Gemini Pro</li>",
              "<li>üñºÔ∏è <strong>Optimization:</strong> Tinify API, Cloudinary AI</li>",
              "<li>üìä <strong>Analytics:</strong> Google PageSpeed Insights API</li>",
              "</ul>",
            ],
          },
          {
            title: "9.6 Caso de Uso Real: E-commerce con IA de Principio a Fin",
            content: [
              "<p><strong>üõçÔ∏è Proyecto Real: TechStore - E-commerce Completo con IA</strong></p>",
              "<p><em>Construcci√≥n completa de un e-commerce moderno usando todas las herramientas IA. De concepto a producci√≥n en 2-3 semanas.</em></p>",
              "<p><strong>Proyecto Overview:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üéØ Objetivo:</strong> E-commerce de productos tech con UX moderna</li>",
              "<li><strong>‚è±Ô∏è Timeline:</strong> 2-3 semanas (vs 2-3 meses tradicional)</li>",
              "<li><strong>ü§ñ IA Integration:</strong> 90% del desarrollo asistido por IA</li>",
              "<li><strong>üìä Resultado:</strong> Performance 95+, Accesibilidad AAA</li>",
              "</ul>",
              "<p><strong>Fase 1: Ideaci√≥n y Dise√±o (2-4 horas)</strong></p>",
              '<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-blue-800">v0.dev Prompt de Inicio:</p>',
              '<p class="text-blue-700 mt-2">"Crea un e-commerce moderno para productos de tecnolog√≠a. Necesito: homepage con hero section, grid de productos con filtros, product detail page, carrito de compras, checkout flow. Dise√±o limpio y minimalista, mobile-first, usando Tailwind CSS. Incluir estados de loading, empty states, y ser completamente accesible."</p>',
              "</div>",
              "<p><strong>Fase 2: Desarrollo de Componentes (1 semana)</strong></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code>// GitHub Copilot - Component Generation\n// Crear sistema de componentes reutilizables para e-commerce\n// Incluir: ProductCard, CartItem, CheckoutForm, UserProfile\n// Con TypeScript strict, Tailwind CSS, y accesibilidad WCAG 2.1\n\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  rating: number;\n  stock: number;\n}\n\n// Copilot genera autom√°ticamente:\nfunction ProductCard({ product, onAddToCart }: ProductCardProps) {\n  // Componente completo con loading states, accessibility, animations\n}</code></pre></div>',
              "<p><strong>Fase 3: Testing y QA Autom√°tico (2-3 d√≠as)</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üß™ Visual Testing:</strong> Chromatic captura todas las variantes</li>",
              "<li><strong>‚ôø Accessibility:</strong> axe-core valida WCAG 2.1 AA autom√°ticamente</li>",
              "<li><strong>‚ö° Performance:</strong> Lighthouse CI asegura Core Web Vitals</li>",
              "<li><strong>üé≠ E2E Testing:</strong> Playwright genera tests del user journey</li>",
              "</ul>",
              "<p><strong>Fase 4: Content y Assets (1 d√≠a)</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üñºÔ∏è Product Images:</strong> Midjourney genera mockups profesionales</li>",
              "<li><strong>üìù Copy:</strong> ChatGPT crea descriptions y microcopy</li>",
              "<li><strong>üî§ Icons:</strong> Set completo de iconos consistentes</li>",
              "<li><strong>üé® Branding:</strong> Logo, colores, tipograf√≠a cohesivos</li>",
              "</ul>",
              "<p><strong>Fase 5: Deploy y Monitoring (2-4 horas)</strong></p>",
              '<div class="bg-green-50 border border-green-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-green-800">Deployment Autom√°tico:</p>',
              '<ul class="text-green-700 mt-2 space-y-1">',
              "<li>‚Ä¢ <strong>Vercel:</strong> Deploy autom√°tico desde GitHub</li>",
              "<li>‚Ä¢ <strong>Performance:</strong> Monitoring continuo con alertas</li>",
              "<li>‚Ä¢ <strong>Analytics:</strong> User behavior tracking autom√°tico</li>",
              "<li>‚Ä¢ <strong>Error Tracking:</strong> Sentry captura issues autom√°ticamente</li>",
              "</ul>",
              "</div>",
              "<p><strong>Resultados Medibles:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚ö° <strong>Lighthouse Score:</strong> 95+ en todas las m√©tricas</li>",
              "<li>‚ôø <strong>Accessibility:</strong> 100% WCAG 2.1 AA compliance</li>",
              "<li>üì± <strong>Mobile UX:</strong> Optimizado para todas las pantallas</li>",
              "<li>üöÄ <strong>Core Web Vitals:</strong> LCP < 2s, FID < 100ms, CLS < 0.1</li>",
              "<li>üß™ <strong>Test Coverage:</strong> 90%+ con tests autom√°ticos</li>",
              "</ul>",
              "<p><strong>Lecciones Aprendidas:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚úÖ <strong>IA Acelera, No Reemplaza:</strong> Direcci√≥n humana es crucial</li>",
              "<li>‚úÖ <strong>Iteraci√≥n R√°pida:</strong> Prototipo ‚Üí Test ‚Üí Mejora en ciclos cortos</li>",
              "<li>‚úÖ <strong>Quality Gates:</strong> Automatizaci√≥n previene regresiones</li>",
              "<li>‚úÖ <strong>User-Centric:</strong> IA optimiza para m√©tricas reales de UX</li>",
              "</ul>",
              '<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-yellow-800">üéØ Pr√≥ximos Pasos:</p>',
              '<p class="text-yellow-700 mt-2">Con este proyecto base, puedes escalar a funcionalidades avanzadas: AI-powered recommendations, dynamic pricing, automated A/B testing, y personalization inteligente.</p>',
              "</div>",
            ],
          },
          {
            title: "9.7 Templates y Configuraciones IA-Ready",
            content: [
              "<p><strong>üõ†Ô∏è Templates Listos para Producci√≥n: Acelera tu Setup IA</strong></p>",
              "<p><em>Como boilerplates backend, pero optimizados para desarrollo frontend con IA. Templates pre-configurados con todas las herramientas IA integradas.</em></p>",
              "<p><strong>Starter Templates Esenciales:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üöÄ Next.js + IA Stack:</strong> Template completo con Copilot, v0.dev ready</li>",
              "<li><strong>üé® Component Library:</strong> Storybook + Chromatic pre-configurado</li>",
              "<li><strong>üß™ Testing Suite:</strong> Playwright + axe-core + Lighthouse CI</li>",
              "<li><strong>üìä Analytics Ready:</strong> Performance monitoring integrado</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code># Estructura del Template Next.js + IA\nai-frontend-template/\n‚îú‚îÄ‚îÄ .github/\n‚îÇ   ‚îî‚îÄ‚îÄ workflows/\n‚îÇ       ‚îú‚îÄ‚îÄ ai-visual-tests.yml     # Chromatic + Playwright\n‚îÇ       ‚îú‚îÄ‚îÄ performance-audit.yml   # Lighthouse CI\n‚îÇ       ‚îî‚îÄ‚îÄ accessibility-check.yml # axe-core automation\n‚îú‚îÄ‚îÄ .vscode/\n‚îÇ   ‚îú‚îÄ‚îÄ settings.json              # Copilot optimizado\n‚îÇ   ‚îú‚îÄ‚îÄ extensions.json            # Extensions recomendadas\n‚îÇ   ‚îî‚îÄ‚îÄ ai-prompts.md              # Prompts personalizados\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ ui/                       # Componentes base v0.dev\n‚îÇ   ‚îú‚îÄ‚îÄ forms/                    # Form components con IA\n‚îÇ   ‚îî‚îÄ‚îÄ layouts/                  # Layout templates\n‚îú‚îÄ‚îÄ lib/\n‚îÇ   ‚îú‚îÄ‚îÄ ai-utils.ts               # Utilidades IA\n‚îÇ   ‚îú‚îÄ‚îÄ performance.ts            # Monitoring tools\n‚îÇ   ‚îî‚îÄ‚îÄ testing-helpers.ts        # Testing utilities\n‚îú‚îÄ‚îÄ hooks/\n‚îÇ   ‚îú‚îÄ‚îÄ use-ai-content.ts         # Content generation\n‚îÇ   ‚îú‚îÄ‚îÄ use-performance.ts        # Performance tracking\n‚îÇ   ‚îî‚îÄ‚îÄ use-accessibility.ts      # A11y helpers\n‚îú‚îÄ‚îÄ config/\n‚îÇ   ‚îú‚îÄ‚îÄ chromatic.config.js       # Visual testing\n‚îÇ   ‚îú‚îÄ‚îÄ lighthouse.config.js      # Performance budget\n‚îÇ   ‚îî‚îÄ‚îÄ ai-tools.config.js        # API keys y settings\n‚îî‚îÄ‚îÄ docs/\n    ‚îú‚îÄ‚îÄ ai-workflow.md            # Workflow documentation\n    ‚îú‚îÄ‚îÄ prompts-library.md        # Prompt collection\n    ‚îî‚îÄ‚îÄ deployment-guide.md       # Deploy con IA validation</code></pre></div>',
              "<p><strong>Configuraci√≥n VS Code Optimizada para IA:</strong></p>",
              '<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-blue-800">settings.json para M√°xima Productividad IA:</p>',
              '<div class="bg-gray-900 rounded p-2 mt-2"><pre><code class="text-sm">{\n  "github.copilot.enable": {\n    "*": true,\n    "plaintext": false,\n    "markdown": true,\n    "scminput": false\n  },\n  "github.copilot.advanced": {\n    "secret_key": "github_copilot_extension_development",\n    "length": 500,\n    "temperature": 0.1,\n    "top_p": 1,\n    "stop": ["\\n\\n\\n"]\n  },\n  "editor.inlineSuggest.enabled": true,\n  "editor.suggestSelection": "first",\n  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",\n  "typescript.suggest.autoImports": true,\n  "typescript.preferences.importModuleSpecifier": "relative",\n  "emmet.includeLanguages": {\n    "typescript": "html",\n    "typescriptreact": "html"\n  },\n  "tailwindCSS.includeLanguages": {\n    "typescript": "html",\n    "typescriptreact": "html"\n  },\n  "files.associations": {\n    "*.css": "tailwindcss"\n  }\n}</code></pre></div>',
              "</div>",
              "<p><strong>Configuraci√≥n de Herramientas IA:</strong></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code># .env.local - Variables de entorno para IA tools\nOPENAI_API_KEY=sk-your-key-here\nCHROMATIC_PROJECT_TOKEN=your-chromatic-token\nLIGHTHOUSE_SERVER_URL=your-lighthouse-server\nVERCEL_TOKEN=your-vercel-token\n\n# AI Configuration\nAI_CONTENT_PROVIDER=openai # openai | anthropic | google\nAI_IMAGE_PROVIDER=midjourney # midjourney | dalle | stable-diffusion\nAI_TESTING_ENABLED=true\nAI_PERFORMANCE_MONITORING=true\n\n# Performance Budgets\nLIGHTHOUSE_PERFORMANCE_BUDGET=90\nLIGHTHOUSE_ACCESSIBILITY_BUDGET=95\nLIGHTHOUSE_SEO_BUDGET=90</code></pre></div>',
              "<p><strong>Package.json con Scripts IA:</strong></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code>{\n  "scripts": {\n    "dev": "next dev",\n    "build": "next build",\n    "start": "next start",\n    \n    // === AI DEVELOPMENT SCRIPTS ===\n    "ai:generate": "node scripts/ai-component-generator.js",\n    "ai:content": "node scripts/ai-content-generator.js",\n    "ai:optimize": "node scripts/ai-optimization.js",\n    \n    // === AI TESTING SCRIPTS ===\n    "test:ai": "npm run test:visual && npm run test:a11y && npm run test:perf",\n    "test:visual": "chromatic --exit-zero-on-changes",\n    "test:a11y": "jest --testPathPattern=accessibility",\n    "test:perf": "lighthouse-ci autorun",\n    "test:e2e": "playwright test",\n    \n    // === AI QUALITY GATES ===\n    "quality:check": "npm run lint && npm run test:ai",\n    "pre-commit": "lint-staged && npm run quality:check",\n    "pre-push": "npm run build && npm run test:ai"\n  },\n  "dependencies": {\n    "next": "^14.0.0",\n    "react": "^18.0.0",\n    "typescript": "^5.0.0",\n    "tailwindcss": "^3.4.0",\n    \n    // === AI INTEGRATIONS ===\n    "openai": "^4.0.0",\n    "@anthropic-ai/sdk": "^0.20.0",\n    "@google/generative-ai": "^0.2.0"\n  },\n  "devDependencies": {\n    // === AI TESTING TOOLS ===\n    "@axe-core/playwright": "^4.8.0",\n    "@chromatic-com/storybook": "^1.0.0",\n    "@lighthouse-ci/cli": "^0.12.0",\n    "@playwright/test": "^1.40.0",\n    \n    // === AI DEVELOPMENT TOOLS ===\n    "prettier-plugin-tailwindcss": "^0.5.0",\n    "eslint-plugin-jsx-a11y": "^6.8.0",\n    "storybook": "^7.6.0"\n  }\n}</code></pre></div>',
              "<p><strong>Templates de Componentes IA-Ready:</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üé® UI Components:</strong> Button, Card, Modal con variants completas</li>",
              "<li><strong>üìù Form Components:</strong> Input, Select, TextArea con validaci√≥n</li>",
              "<li><strong>üìä Data Components:</strong> Table, Chart, Dashboard con loading states</li>",
              "<li><strong>üöÄ Layout Components:</strong> Header, Sidebar, Footer responsive</li>",
              "</ul>",
              '<div class="bg-green-50 border border-green-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-green-800">Template de Componente Optimizado para IA:</p>',
              '<div class="bg-gray-900 rounded p-2 mt-2"><pre><code class="text-sm">// components/ui/button.tsx\n// AI-ready component template con todas las variants\n\nimport { forwardRef } from "react";\nimport { cn } from "@/lib/utils";\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: "primary" | "secondary" | "destructive" | "ghost";\n  size?: "sm" | "md" | "lg";\n  loading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\n// Component con patterns que IA reconoce f√°cilmente\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ variant = "primary", size = "md", loading = false, children, className, leftIcon, rightIcon, ...props }, ref) => {\n    return (\n      <button\n        ref={ref}\n        className={cn(\n          // Base styles - AI entiende estos patrones\n          "inline-flex items-center justify-center rounded-md font-medium transition-colors",\n          "focus:outline-none focus:ring-2 focus:ring-offset-2",\n          "disabled:opacity-50 disabled:pointer-events-none",\n          \n          // Variant styles - patterns reconocibles por IA\n          {\n            "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500": variant === "primary",\n            "bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500": variant === "secondary",\n            "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500": variant === "destructive",\n            "hover:bg-gray-100 focus:ring-gray-500": variant === "ghost",\n          },\n          \n          // Size styles - IA aprende estos patterns\n          {\n            "h-8 px-3 text-sm": size === "sm",\n            "h-10 px-4 text-base": size === "md",\n            "h-12 px-6 text-lg": size === "lg",\n          },\n          \n          className\n        )}\n        disabled={loading || props.disabled}\n        {...props}\n      >\n        {loading ? (\n          <svg className="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">\n            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />\n            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />\n          </svg>\n        ) : leftIcon}\n        {children}\n        {rightIcon}\n      </button>\n    );\n  }\n);\n\nButton.displayName = "Button";\n\nexport { Button, type ButtonProps };</code></pre></div>',
              "</div>",
            ],
          },
          {
            title: "9.8 Workflows Avanzados y Casos de Uso IA",
            content: [
              "<p><strong>üîÑ Workflows Profesionales: De Desarrollo a Producci√≥n con IA</strong></p>",
              "<p><em>Como pipelines CI/CD pero optimizados para desarrollo frontend. Automatizaci√≥n completa desde desarrollo hasta deployment con validaciones IA en cada paso.</em></p>",
              "<p><strong>Workflow 1: Feature Development con IA</strong></p>",
              "<ol class='list-decimal pl-6 space-y-2'>",
              "<li><strong>üìã Planning:</strong> Definir requirements con IA assistance</li>",
              "<li><strong>üé® Design:</strong> v0.dev genera wireframes y componentes</li>",
              "<li><strong>üíª Development:</strong> Copilot asiste en implementaci√≥n</li>",
              "<li><strong>üß™ Testing:</strong> AI testing suite valida autom√°ticamente</li>",
              "<li><strong>üìä Performance:</strong> Lighthouse CI verifica optimizations</li>",
              "<li><strong>üöÄ Deploy:</strong> CI/CD con quality gates IA</li>",
              "</ol>",
              '<div class="bg-purple-50 border border-purple-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-purple-800">GitHub Actions Workflow con IA:</p>',
              '<div class="bg-gray-900 rounded p-2 mt-2"><pre><code class="text-sm"># .github/workflows/ai-feature-workflow.yml\nname: AI-Powered Feature Development\n\non:\n  pull_request:\n    branches: [main, develop]\n  push:\n    branches: [main]\n\njobs:\n  ai-quality-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 18\n          cache: npm\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: AI Code Analysis\n        run: |\n          # AI analiza el c√≥digo para issues comunes\n          npm run ai:code-analysis\n          # AI sugiere optimizaciones\n          npm run ai:optimize-suggestions\n      \n      - name: Visual Regression Testing\n        run: npm run test:visual\n        env:\n          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n      \n      - name: Accessibility Testing\n        run: npm run test:a11y\n      \n      - name: Performance Audit\n        run: npm run test:perf\n        env:\n          LIGHTHOUSE_SERVER_URL: ${{ secrets.LIGHTHOUSE_SERVER_URL }}\n      \n      - name: AI Summary Report\n        run: |\n          # AI genera resumen de todos los tests\n          npm run ai:generate-report\n          # AI sugiere pr√≥ximos pasos\n          npm run ai:next-steps</code></pre></div>',
              "</div>",
              "<p><strong>Workflow 2: A/B Testing Autom√°tico con IA</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üéØ Hypothesis Generation:</strong> IA sugiere variantes a testear</li>",
              "<li><strong>üé® Variant Creation:</strong> v0.dev genera versiones alternativas</li>",
              "<li><strong>üìä Test Setup:</strong> Configuraci√≥n autom√°tica de experimentos</li>",
              "<li><strong>üìà Results Analysis:</strong> IA analiza m√©tricas y sugiere ganadores</li>",
              "</ul>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code>// lib/ai-ab-testing.ts\ninterface ABTestConfig {\n  name: string;\n  variants: {\n    control: React.ComponentType;\n    treatment: React.ComponentType;\n  };\n  metrics: string[];\n  audienceSegments?: string[];\n}\n\nexport class AIABTestManager {\n  async generateVariants(component: string, goal: string) {\n    // IA genera m√∫ltiples variantes basadas en el goal\n    const prompt = `\n      Genera 3 variantes del componente ${component} optimizadas para ${goal}.\n      Incluye: copy variations, color schemes, layout changes.\n      Mant√©n funcionalidad id√©ntica, solo cambia elementos visuales/UX.\n    `;\n    \n    return await this.aiService.generateVariants(prompt);\n  }\n  \n  async analyzeResults(testResults: TestResults) {\n    // IA analiza resultados y sugiere pr√≥ximos experimentos\n    const insights = await this.aiService.analyzeMetrics(testResults);\n    \n    return {\n      winner: insights.statisticallySignificant,\n      recommendations: insights.nextExperiments,\n      confidenceLevel: insights.confidence\n    };\n  }\n}</code></pre></div>',
              "<p><strong>Workflow 3: Content Optimization Continua</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üìù Content Audit:</strong> IA analiza performance de copy actual</li>",
              "<li><strong>üéØ SEO Optimization:</strong> Generaci√≥n autom√°tica de meta tags</li>",
              "<li><strong>üåê Localization:</strong> Traducci√≥n y adaptaci√≥n cultural autom√°tica</li>",
              "<li><strong>üìä Performance Tracking:</strong> Monitoring de engagement autom√°tico</li>",
              "</ul>",
              "<p><strong>Workflow 4: Performance Monitoring Inteligente</strong></p>",
              '<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-blue-800">Real User Monitoring con IA:</p>',
              "<div class=\"bg-gray-900 rounded p-2 mt-2\"><pre><code class=\"text-sm\">// lib/ai-performance-monitor.ts\nexport class AIPerformanceMonitor {\n  constructor() {\n    this.observer = new PerformanceObserver((list) => {\n      list.getEntries().forEach(entry => {\n        this.analyzeMetric(entry);\n      });\n    });\n    \n    this.observer.observe({ entryTypes: ['navigation', 'paint', 'largest-contentful-paint'] });\n  }\n  \n  async analyzeMetric(entry: PerformanceEntry) {\n    const analysis = await this.aiService.analyzePerformance({\n      metric: entry.name,\n      value: entry.startTime,\n      context: this.getPageContext()\n    });\n    \n    if (analysis.isRegression) {\n      await this.createPerformanceAlert(analysis);\n    }\n    \n    if (analysis.optimizationSuggestions.length > 0) {\n      await this.queueOptimizations(analysis.optimizationSuggestions);\n    }\n  }\n  \n  async createPerformanceAlert(analysis: PerformanceAnalysis) {\n    // IA genera alertas espec√≠ficas con contexto\n    const alert = {\n      severity: analysis.impact,\n      description: `Performance regression detected: ${analysis.metric} increased by ${analysis.change}%`,\n      recommendations: analysis.quickFixes,\n      affectedUsers: analysis.impactedSegments\n    };\n    \n    await this.notificationService.send(alert);\n  }\n}</code></pre></div>",
              "</div>",
              "<p><strong>Workflow 5: Deployment Inteligente</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üîç Pre-Deploy Validation:</strong> IA verifica readiness para producci√≥n</li>",
              "<li><strong>üöÄ Progressive Rollout:</strong> Deploy gradual con monitoring IA</li>",
              "<li><strong>üìä Health Monitoring:</strong> IA detecta issues post-deploy</li>",
              "<li><strong>üîÑ Auto-Rollback:</strong> Revert autom√°tico si IA detecta problemas</li>",
              "</ul>",
              "<p><strong>Casos de Uso Avanzados:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>üéØ <strong>Personalization:</strong> UI adaptativa basada en user behavior</li>",
              "<li>üîç <strong>Smart Search:</strong> B√∫squeda inteligente con AI suggestions</li>",
              "<li>üí¨ <strong>AI Chatbots:</strong> Soporte integrado en la interfaz</li>",
              "<li>üìä <strong>Predictive Analytics:</strong> Anticipar needs del usuario</li>",
              "<li>üõ°Ô∏è <strong>Security Monitoring:</strong> Detecci√≥n autom√°tica de amenazas</li>",
              "</ul>",
              '<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-yellow-800">üöÄ El Futuro es IA-First:</p>',
              '<p class="text-yellow-700 mt-2">Estos workflows representan el futuro del desarrollo frontend. La IA no es solo una herramienta m√°s, es el core que potencia todo el proceso de desarrollo, testing, y deployment.</p>',
              "</div>",
            ],
          },
          {
            title: "9.9 Casos de Uso Avanzados: Proyectos Reales IA-Driven",
            content: [
              "<p><strong>üöÄ Proyectos Profesionales: Portfolio de Casos de Uso IA</strong></p>",
              "<p><em>Casos reales de implementaci√≥n IA-driven. Desde startups hasta enterprise, estos proyectos demuestran el potencial completo del desarrollo frontend asistido por IA.</em></p>",
              "<p><strong>Caso 1: SaaS Dashboard - FinanceAI Analytics üíº</strong></p>",
              '<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-blue-800">Proyecto: Dashboard Financiero con Predicciones IA</p>',
              '<ul class="text-blue-700 mt-2 space-y-1">',
              "<li>‚Ä¢ <strong>Stack:</strong> Next.js 14, TypeScript, TailwindCSS, Recharts, OpenAI API</li>",
              "<li>‚Ä¢ <strong>Generado con v0.dev:</strong> 85% de componentes UI base</li>",
              "<li>‚Ä¢ <strong>GitHub Copilot:</strong> L√≥gica de charts y integraciones API</li>",
              "<li>‚Ä¢ <strong>Timeline:</strong> 1 semana (vs 6 semanas tradicional)</li>",
              "<li>‚Ä¢ <strong>Resultado:</strong> Performance 96/100, Revenue +300%</li>",
              "</ul>",
              "</div>",
              "<p><strong>Caso 2: E-commerce Personalizado - ShopSmart AI üõçÔ∏è</strong></p>",
              "<ul class='list-disc pl-6 space-y-2'>",
              "<li><strong>üéØ Personalizaci√≥n IA:</strong> Productos recomendados en tiempo real</li>",
              "<li><strong>ü§ñ Chatbot Inteligente:</strong> Soporte de ventas conversacional</li>",
              "<li><strong>üìä Dynamic Pricing:</strong> Precios optimizados por IA</li>",
              "<li><strong>üé® Content Generation:</strong> Descriptions autom√°ticas de productos</li>",
              "<li><strong>üìà A/B Testing:</strong> Optimizaci√≥n continua de conversi√≥n</li>",
              "</ul>",
              "<p><strong>Caso 3: Healthcare Portal - MedAI Patient Dashboard üè•</strong></p>",
              '<div class="bg-green-50 border border-green-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-green-800">Cumplimiento Cr√≠tico: HIPAA + WCAG 2.1 AAA</p>',
              '<ul class="text-green-700 mt-2 space-y-1">',
              "<li>‚Ä¢ <strong>Accesibilidad IA:</strong> axe-core autom√°tico + screen reader optimization</li>",
              "<li>‚Ä¢ <strong>Security First:</strong> Validaci√≥n autom√°tica de vulnerabilidades</li>",
              "<li>‚Ä¢ <strong>Performance:</strong> Core Web Vitals 100/100 (cr√≠tico para accesibilidad)</li>",
              "<li>‚Ä¢ <strong>Content IA:</strong> Explicaciones m√©dicas en lenguaje simple</li>",
              "</ul>",
              "</div>",
              "<p><strong>M√©tricas de √âxito Medibles:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>‚ö° <strong>Velocidad de Desarrollo:</strong> 5-10x m√°s r√°pido vs desarrollo tradicional</li>",
              "<li>üìä <strong>Performance Scores:</strong> 95+ promedio en Lighthouse</li>",
              "<li>‚ôø <strong>Accessibility:</strong> 100% WCAG 2.1 AA compliance autom√°tico</li>",
              "<li>üéØ <strong>User Engagement:</strong> +40% average increase</li>",
              "<li>üí∞ <strong>ROI:</strong> 300-500% retorno de inversi√≥n en herramientas IA</li>",
              "<li>üîÑ <strong>Maintenance:</strong> 60% reducci√≥n en bugs post-deploy</li>",
              "</ul>",
            ],
          },
          {
            title: "9.10 Herramientas Especializadas y Integraciones Avanzadas",
            content: [
              "<p><strong>üõ†Ô∏è Arsenal Completo: Herramientas IA Profesionales 2025</strong></p>",
              "<p><em>Stack completo de herramientas especializadas para cada fase del desarrollo. Como tener un equipo senior de frontend working 24/7.</em></p>",
              "<p><strong>Categor√≠a 1: AI Code Generation & Assistance üíª</strong></p>",
              '<div class="bg-gray-900 rounded p-4 my-4"><pre><code># Herramientas de Generaci√≥n de C√≥digo\n\n## Tier 1: Esenciales (Must-Have)\n- GitHub Copilot ($10/mes) - Pair programming IA\n- v0.dev (Gratis) - Component generation\n- Cursor IDE ($20/mes) - AI-first code editor\n- Codeium (Gratis) - Alternative a Copilot\n\n## Tier 2: Especializadas\n- Tabnine ($12/mes) - Context-aware completions\n- Amazon CodeWhisperer (Gratis) - AWS-optimized\n- Replit Ghostwriter ($7/mes) - Web-based coding\n- Sourcegraph Cody ($9/mes) - Enterprise code understanding</code></pre></div>',
              "<p><strong>Categor√≠a 2: AI Testing & Quality Assurance üß™</strong></p>",
              '<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-blue-800">Testing Suite Automatizado con IA:</p>',
              '<ul class="text-blue-700 mt-2 space-y-1">',
              "<li>‚Ä¢ <strong>Visual Testing:</strong> Chromatic + Storybook AI</li>",
              "<li>‚Ä¢ <strong>E2E Testing:</strong> Playwright con AI test generation</li>",
              "<li>‚Ä¢ <strong>Accessibility:</strong> axe-core con AI reporting</li>",
              "<li>‚Ä¢ <strong>Performance:</strong> Lighthouse CI con AI insights</li>",
              "</ul>",
              "</div>",
              "<p><strong>ROI y Justificaci√≥n Empresarial:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>üí∞ <strong>Inversi√≥n Inicial:</strong> $50-200/mes en herramientas IA</li>",
              "<li>‚è±Ô∏è <strong>Ahorro de Tiempo:</strong> 60-80% reducci√≥n en desarrollo</li>",
              "<li>üë• <strong>Reduce Team Size:</strong> 1 developer IA-powered = 3-4 traditional</li>",
              "<li>üéØ <strong>Quality Improvement:</strong> 90% menos bugs en producci√≥n</li>",
              "<li>üìà <strong>Revenue Impact:</strong> 200-400% faster time-to-market</li>",
              "<li>üîÑ <strong>Maintenance:</strong> 70% reducci√≥n en costos de mantenimiento</li>",
              "</ul>",
            ],
          },
          {
            title: "9.11 Proyecto Final: E-commerce Completo IA-Driven",
            content: [
              "<p><strong>üèÜ Capstone Project: TechStore Pro - E-commerce Enterprise IA-First</strong></p>",
              "<p><em>Proyecto integrador que demuestra todo el stack IA aprendido. E-commerce enterprise-grade built 100% con herramientas IA en 2-3 semanas.</em></p>",
              "<p><strong>üìã Especificaciones del Proyecto:</strong></p>",
              '<div class="bg-indigo-50 border border-indigo-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-indigo-800">üéØ TechStore Pro - Especificaciones T√©cnicas</p>',
              '<ul class="text-indigo-700 mt-2 space-y-1">',
              "<li>‚Ä¢ <strong>Frontend:</strong> Next.js 14, TypeScript, Tailwind CSS, Framer Motion</li>",
              "<li>‚Ä¢ <strong>IA Tools:</strong> v0.dev, GitHub Copilot, Midjourney, OpenAI API</li>",
              "<li>‚Ä¢ <strong>Testing:</strong> Playwright, Chromatic, axe-core, Lighthouse CI</li>",
              "<li>‚Ä¢ <strong>Performance:</strong> Core Web Vitals 95+, Accessibility AAA</li>",
              "<li>‚Ä¢ <strong>Features:</strong> 20+ p√°ginas, 50+ componentes, IA-powered</li>",
              "</ul>",
              "</div>",
              "<p><strong>Fase 1: Arquitectura y Setup (D√≠a 1) ‚öôÔ∏è</strong></p>",
              "<p><strong>Fase 2: Design System con v0.dev (D√≠a 2-3) üé®</strong></p>",
              "<p><strong>Fase 3: Feature Development con Copilot (D√≠a 4-8) üíª</strong></p>",
              "<p><strong>Fase 4: Content & Assets con IA (D√≠a 9-10) üñºÔ∏è</strong></p>",
              "<p><strong>Fase 5: Testing & QA con IA (D√≠a 11-12) üß™</strong></p>",
              "<p><strong>Fase 6: Deployment & Monitoring (D√≠a 13-14) üöÄ</strong></p>",
              "<p><strong>üìä Resultados Esperados del Proyecto:</strong></p>",
              "<ul class='list-disc pl-6 space-y-1'>",
              "<li>üéØ <strong>Performance:</strong> Lighthouse Score 95+ (vs 70-80 typical)</li>",
              "<li>‚ôø <strong>Accessibility:</strong> WCAG 2.1 AAA compliance (vs AA typical)</li>",
              "<li>‚ö° <strong>Core Web Vitals:</strong> LCP <2s, FID <100ms, CLS <0.1</li>",
              "<li>üì± <strong>Mobile Score:</strong> 95+ (responsive perfecto)</li>",
              "<li>üîç <strong>SEO Score:</strong> 95+ (content IA optimizado)</li>",
              "<li>üõ°Ô∏è <strong>Security:</strong> A+ grade (best practices autom√°ticos)</li>",
              "<li>‚è±Ô∏è <strong>Development Time:</strong> 14 d√≠as (vs 3-4 meses tradicional)</li>",
              "<li>üí∞ <strong>Cost Efficiency:</strong> 80% reducci√≥n vs equipo tradicional</li>",
              "</ul>",
              '<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 my-4">',
              '<p class="font-medium text-yellow-800">üèÜ Portfolio Impact:</p>',
              '<p class="text-yellow-700 mt-2">Este proyecto demuestra dominio completo del stack IA-driven frontend. Es evidence convincente para employers de que puedes deliver enterprise-grade applications usando modern AI tools con velocity y quality excepcionales.</p>',
              "</div>",
            ],
          },
        ],
      },
    ],

    aiPrompts: [
      {
        title: "1. Analizar Backend para Frontend",
        description: "Extraer informaci√≥n del backend para planificar el frontend",
        prompt: `Analiza este backend/API para planificar el frontend correspondiente:

**Informaci√≥n que necesito del backend:**
- Endpoints disponibles y m√©todos HTTP
- Estructura de datos (request/response schemas)
- Autenticaci√≥n y autorizaci√≥n (JWT, roles, permisos)
- Websockets o real-time features
- File upload capabilities
- Rate limiting y paginaci√≥n
- Error handling patterns

**Backend info/documentation:** [PEGAR_DOCUMENTACION_O_CODIGO_BACKEND]

**Genera para el frontend:**
1. TypeScript interfaces para todas las entities
2. API client structure recommendations
3. State management needs (global vs local)
4. Required environment variables
5. Authentication flow design
6. Error handling strategy
7. Data fetching patterns recommendation

**Considera:**
- Separaci√≥n entre frontend y backend repos
- CORS configuration needs
- API versioning strategy
- Development vs production endpoints`,
      },
      {
        title: "2. Setup Inicial de Proyecto Frontend",
        description: "Crear y configurar proyecto frontend desde cero",
        prompt: `Configura un proyecto frontend completo conectado a backend existente:

**Especificaciones:**
- Next.js 14 con App Router + TypeScript strict
- Tailwind CSS con design system personalizado
- Configuraci√≥n para conectar con backend en: [URL_BACKEND]
- Autenticaci√≥n: [JWT/OAuth/Auth0/etc]
- State management: [Redux Toolkit/Zustand/Context]

**Incluye configuraci√≥n completa de:**
- package.json con todas las dependencias necesarias
- next.config.js optimizado para producci√≥n
- tailwind.config.js con tokens personalizados
- ESLint + Prettier + Husky pre-commit hooks
- Estructura de carpetas escalable
- Variables de entorno (.env.local, .env.production)
- API client setup (axios/fetch wrapper)
- Authentication context/provider
- Error boundary global
- Layout components base

**Consideraciones especiales:**
- CORS handling if different domains
- Proxy configuration for development
- Build optimization for deployment`,
      },
      {
        title: "3. Crear API Client y Conectividad",
        description: "Implementar capa de comunicaci√≥n con el backend",
        prompt: `Crea un API client robusto para conectar con el backend:

**Backend endpoints:** [LISTAR_ENDPOINTS_PRINCIPALES]
**Authentication type:** [JWT/Bearer/etc]
**Base URL:** [URL_BACKEND]

**Implementa:**
- API client con interceptors para auth y errors
- TypeScript interfaces para requests/responses
- Custom hooks para cada endpoint principal
- Error handling centralizado con toast notifications
- Loading states management
- Retry logic para requests fallidos
- Cache strategy con Tanstack Query
- Optimistic updates donde sea apropiado

**Estructura requerida:**
\`\`\`
/lib
  /api
    client.ts       // Axios/fetch configuration
    types.ts        // TypeScript interfaces
    endpoints.ts    // API endpoints constants
  /hooks
    useAuth.ts      // Authentication logic
    useUsers.ts     // Users CRUD operations
    useProducts.ts  // Products operations
    [otros hooks seg√∫n entidades]
\`\`\`

**Features espec√≠ficos:**
- Automatic token refresh
- Request/response logging in development
- Network error handling
- Timeout configuration
- Request cancellation on component unmount`,
      },
      {
        title: "4. Integraci√≥n Completa de M√≥dulos Backend-Frontend",
        description: "Mapear y conectar todos los m√≥dulos backend con frontend",
        prompt: `Implementa integraci√≥n completa de m√≥dulos backend con frontend:

**Backend Analysis:** [ANALIZAR_ESTRUCTURA_BACKEND_COMPLETA]
**Modules Detected:** [LISTAR_TODOS_LOS_MODULOS: auth, users, products, orders, etc]
**API Endpoints:** [DOCUMENTAR_TODOS_LOS_ENDPOINTS_POR_MODULO]
**Entity Relationships:** [MAPEAR_RELACIONES_ENTRE_ENTIDADES]

**Full Module Integration Strategy:**

**1. Backend Module Mapping:**
- Analyze backend folder structure y identify all modules
- Document all API endpoints por cada m√≥dulo
- Map entity relationships y data dependencies
- Identify CRUD operations disponibles
- Document authentication/authorization requirements per endpoint

**2. Frontend Module Structure Creation:**
- Create corresponding frontend modules para cada backend module
- Implement service layer para cada grupo de endpoints
- Create TypeScript interfaces para todas las entities
- Setup API client methods con proper typing
- Implement error handling espec√≠fico por m√≥dulo

**3. Page Implementation Strategy:**
- List pages para cada entity (con pagination, filtering, sorting)
- Detail/view pages para individual entities
- Create/edit forms para cada entity
- Dashboard pages con entity overviews
- Admin pages para entity management

**4. Component Library per Module:**
- Entity cards para list displays
- Entity forms con proper validation
- Entity tables con actions
- Entity modals/drawers para quick actions
- Entity-specific widgets para dashboards

**5. Navigation & Routing Integration:**
- Create complete route structure para todos los m√≥dulos
- Implement breadcrumb navigation
- Setup module-based navigation menus
- Configure role-based route access
- Implement search across all entities

**6. State Management per Module:**
- Setup Zustand stores para cada m√≥dulo
- Implement Tanstack Query hooks para all endpoints
- Create optimistic updates para CRUD operations
- Setup cross-module data synchronization
- Implement global state para shared data

**Implementation Approach:**
\`\`\`typescript
// Example structure per module
/src/modules/[module-name]/
  /api/           // API client methods
  /components/    // Module-specific components
  /hooks/         // Module-specific hooks
  /pages/         // Module pages
  /store/         // Module state management
  /types/         // Module TypeScript types
  /utils/         // Module utilities
\`\`\``,
      },
      {
        title: "5. Arquitectura de Componentes y Estado",
        description: "Dise√±ar la estructura de componentes basada en datos del backend",
        prompt: `Dise√±a la arquitectura de componentes para esta aplicaci√≥n:

**Datos del backend:** [DESCRIBIR_ENTIDADES_Y_RELACIONES]
**Funcionalidades principales:** [LISTAR_FEATURES_PRINCIPALES]

**Genera arquitectura completa:**

**1. Component Hierarchy:**
- Layout components (Header, Sidebar, Footer)
- Page components (Home, Dashboard, Profile, etc)
- Feature components (UserList, ProductCard, OrderForm)
- UI primitives (Button, Input, Modal, etc)

**2. State Management Strategy:**
- Global state: [User session, app settings, notifications]
- Server state: [API data con Tanstack Query]
- Local state: [Form data, UI state, component state]
- State flow diagrams entre componentes

**3. Props Interfaces (TypeScript):**
- Definir interfaces para cada componente
- Composition patterns y compound components
- Render props vs children patterns

**4. Folder Structure:**
\`\`\`
/components
  /ui           // Primitivos reutilizables
  /forms        // Form components
  /layouts      // Layout components
  /features     // Business logic components
/hooks          // Custom hooks
/contexts       // React contexts
/store          // Global state (si usas Redux/Zustand)
\`\`\`

**5. Component Communication Patterns:**
- Parent-child props flow
- Context providers para shared state
- Custom hooks para business logic
- Event handling patterns`,
      },
      {
        title: "6. Implementar Autenticaci√≥n y Autorizaci√≥n",
        description: "Setup completo de auth conectado con backend",
        prompt: `Implementa sistema de autenticaci√≥n completo:

**Backend auth info:** [JWT/OAuth/tipo_de_auth]
**Endpoints de auth:** [login, register, refresh, logout]
**Roles/permisos:** [admin, user, etc]

**Implementa:**

**1. Auth Context/Provider:**
- Login/logout functionality
- Token management (storage, refresh)
- User session persistence
- Role-based access control

**2. Protected Routes:**
- Route guards based on authentication
- Role-based route protection
- Redirect logic (login -> intended page)
- Loading states during auth checks

**3. Auth Components:**
- LoginForm con validaci√≥n
- RegisterForm si aplica
- PasswordReset flow
- UserProfile management

**4. Security Best Practices:**
- Secure token storage (httpOnly cookies vs localStorage)
- XSS protection
- CSRF protection if needed
- Session timeout handling
- Automatic logout on token expiry

**5. Integration con API Client:**
- Automatic token attachment to requests
- Token refresh interceptors
- Logout on 401/403 responses
- Auth error handling

**C√≥digo TypeScript con:**
- Auth interfaces y types
- Custom hooks (useAuth, usePermissions)
- HOC o wrapper para protected components
- Error boundaries para auth errors`,
      },
      {
        title: "7. Formularios y Validaci√≥n de Datos",
        description: "Implementar forms conectados con validaci√≥n backend",
        prompt: `Crea sistema de formularios robusto:

**Backend validation rules:** [DESCRIBIR_REGLAS_DE_VALIDACION]
**Forms requeridos:** [Login, Register, UserProfile, CreateProduct, etc]

**Implementa con React Hook Form + Zod:**

**1. Validation Schemas:**
- Zod schemas que coincidan con backend validation
- Custom validators para business rules
- Async validation (email exists, username available)
- Cross-field validation

**2. Form Components:**
- Reusable form controls (Input, Select, Checkbox, etc)
- Form layouts responsivos
- Error display patterns
- Loading states durante submission

**3. Form Submission:**
- Optimistic updates donde sea apropiado
- Error handling (validation vs server errors)
- Success feedback (toast, redirect, etc)
- Form reset despu√©s de √©xito

**4. Advanced Features:**
- Multi-step forms con progress indicator
- Autosave/draft functionality
- File upload con progress
- Conditional fields basados en otros valores

**Estructura de archivos:**
\`\`\`
/forms
  /schemas        // Zod validation schemas
  /components     // Form components
  /hooks          // useForm custom hooks
  /utils          // Form utilities
\`\`\`

**Ejemplo TypeScript completo para:**
- UserProfileForm
- ProductCreateForm
- Validation error handling
- Integration con API mutations`,
      },
      {
        title: "8. Gesti√≥n de Estado Servidor con Tanstack Query",
        description: "Implementar cache y sincronizaci√≥n con backend",
        prompt: `Configura gesti√≥n de estado servidor profesional:

**Backend endpoints:** [LISTAR_ENDPOINTS_PRINCIPALES]
**Data relationships:** [user->orders, product->reviews, etc]

**Implementa Tanstack Query setup:**

**1. Query Configuration:**
- QueryClient setup con defaults optimizados
- Query keys organization y patterns
- Stale time y cache time apropiados
- Error handling global

**2. Data Fetching Patterns:**
- useQuery para data fetching
- Infinite queries para paginaci√≥n
- Dependent queries (fetch B after A)
- Parallel queries con useQueries

**3. Mutations y Updates:**
- useMutation para CREATE/UPDATE/DELETE
- Optimistic updates para mejor UX
- Query invalidation strategies
- Rollback en caso de errores

**4. Advanced Features:**
- Background refetching
- Window focus refetching
- Network status handling
- Retry logic personalizado
- Prefetching para rutas anticipadas

**5. Integration Patterns:**
\`\`\`typescript
// Ejemplo de estructura
const useUsers = () => {
  return useQuery({
    queryKey: ['users'],
    queryFn: fetchUsers,
    staleTime: 5 * 60 * 1000, // 5 minutos
  });
};

const useCreateUser = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: createUser,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
    },
  });
};
\`\`\`

**Performance optimizations:**
- Selective query invalidation
- Data normalization strategies
- Memory management para large datasets`,
      },
      {
        title: "9. Custom Hooks y L√≥gica Reutilizable",
        description: "Crear hooks personalizados para la aplicaci√≥n",
        prompt: `Crea custom hooks TypeScript para esta aplicaci√≥n:

**Funcionalidades de la app:** [DESCRIBIR_FEATURES_PRINCIPALES]
**Datos que maneja:** [user, products, orders, etc]

**Custom Hooks requeridos:**

**1. Data Hooks:**
- useAuth() - Authentication state y methods
- useUser(id) - Single user with caching
- useUsers(filters) - Users list con filtering
- useProducts(category) - Products by category
- useCart() - Shopping cart management

**2. UI/UX Hooks:**
- useLocalStorage<T>() - Persistent local state
- useDebounce<T>() - Debounced values para search
- useToggle() - Boolean state toggle
- useDisclosure() - Modal/drawer open/close state
- usePagination() - Pagination logic

**3. Form Hooks:**
- useFormPersist() - Auto-save form data
- useFieldValidation() - Real-time field validation
- useMultiStepForm() - Multi-step form navigation

**4. Performance Hooks:**
- useVirtualList() - Virtualization para large lists
- useIntersectionObserver() - Lazy loading
- useThrottle() - Throttled functions

**Requirements:**
- Full TypeScript support con generics
- Error handling robusto
- Cleanup en useEffect donde sea necesario
- JSDoc documentation
- Unit tests examples
- Integration con existing API layer

**Ejemplo de estructura:**
\`\`\`typescript
interface UseUserReturn {
  user: User | null;
  loading: boolean;
  error: Error | null;
  updateUser: (data: Partial<User>) => Promise<void>;
  refreshUser: () => void;
}

const useUser = (userId: string): UseUserReturn => {
  // Implementation
};
\`\`\``,
      },
      {
        title: "10. Funcionalidades de Dominio Espec√≠fico",
        description: "Implementar features avanzadas del negocio y caracter√≠sticas espec√≠ficas del dominio",
        prompt: `Implementa funcionalidades de dominio espec√≠fico y caracter√≠sticas avanzadas:

**Domain Context:** [DESCRIBIR_DOMINIO_DEL_NEGOCIO]
**Core Entities:** [LISTAR_ENTIDADES_PRINCIPALES_Y_RELACIONES]
**Business Rules:** [REGLAS_DE_NEGOCIO_ESPEC√çFICAS]

**Domain-Specific Features Implementation:**

**1. Business Logic Layer:**
- Domain services para business rules complejas
- Validation rules espec√≠ficas del dominio
- Data transformation utilities
- Business workflow implementations
- Domain-specific error handling

**2. Advanced Search & Filtering:**
- Multi-criteria search implementation
- Faceted search con dynamic filters
- Search suggestions y autocomplete
- Advanced sorting capabilities
- Search result highlighting
- Filter persistence y URL state sync

**3. Data Visualization & Analytics:**
- Interactive charts para business metrics
- Dashboard widgets personalizables
- Export functionality (PDF, Excel, CSV)
- Real-time data visualization
- Comparative analytics features
- Custom report generation

**4. Real-time Features:**
- WebSocket integration para live updates
- Real-time notifications system
- Live data synchronization
- Presence indicators
- Real-time collaboration features
- Push notification implementation

**5. Media & File Management:**
- File upload con drag & drop
- Image processing y optimization
- Multi-file upload con progress
- File type validation y security
- Media gallery components
- Document preview functionality

**6. Advanced UX Features:**
- Bulk operations interface
- Keyboard shortcuts implementation
- Advanced tooltips y help system
- Contextual actions y quick actions
- Undo/redo functionality
- User preferences y customization

**Integration Requirements:**
- Seamless integration con existing architecture
- Performance optimization para large datasets
- Error handling robusto para complex workflows
- Accessibility compliance para advanced features
- Mobile optimization para complex interactions
- Offline capability donde sea apropiado

**Expected Deliverables:**
- Domain service layer implementation
- Advanced UI components library
- Real-time communication setup
- Analytics dashboard framework
- File management system
- Comprehensive error handling
- Performance monitoring para complex features`,
      },
      {
        title: "11. Testing Strategy Frontend-Backend",
        description: "Implementar testing completo incluyendo integraci√≥n con backend",
        prompt: `Crea estrategia de testing completa para app frontend-backend:

**Backend endpoints:** [LISTAR_ENDPOINTS_PRINCIPALES]
**Funcionalidades cr√≠ticas:** [auth, payments, data CRUD, etc]

**Testing Pyramid Implementation:**

**1. Unit Tests (Vitest):**
- Utility functions
- Custom hooks con @testing-library/react-hooks
- Components aislados con mocking
- Validation schemas (Zod)
- API client functions

**2. Integration Tests:**
- Components + API calls con MSW (Mock Service Worker)
- Form submission flows
- Authentication flows
- State management integration
- Error boundary testing

**3. E2E Tests (Playwright):**
- Critical user journeys
- Authentication flow completo
- Payment/checkout process
- Admin workflows
- Cross-browser compatibility

**4. API Contract Testing:**
- Schema validation contra backend real
- API response structure verification
- Error handling verification

**Setup Configuration:**
\`\`\`
/tests
  /unit          // Component y utility tests
  /integration   // Integration tests
  /e2e          // Playwright tests
  /mocks        // MSW handlers
  /fixtures     // Test data
  /utils        // Testing utilities
\`\`\`

**MSW Setup para API mocking:**
- Handlers para todos los endpoints principales
- Realistic error responses
- Authentication mocking
- Data persistence durante tests

**CI/CD Integration:**
- GitHub Actions workflow
- Parallel test execution
- Test coverage reporting
- Visual regression testing con Chromatic`,
      },
      {
        title: "12. Componentes UI con v0.dev",
        description: "Generar componentes de interfaz usando v0.dev",
        prompt: `Crea prompts optimizados para v0.dev para generar componentes UI:

**Datos del backend:** [DESCRIBIR_ENTITIES_Y_RELATIONSHIPS]
**Brand/Design requirements:** [colors, typography, style guide]

**Componentes a generar con v0.dev:**

**1. Data Display Components:**
Prompt: "Create a [UserCard/ProductCard/OrderCard] component showing:
- [espec√≠ficos data fields del backend]
- Interactive actions: [edit, delete, view details]
- Loading and error states
- Responsive design mobile-first
- Accessible WCAG 2.1 AA
- Style: [modern/clean/professional]
- Colors: [brand colors or palette]"

**2. Form Components:**
Prompt: "Generate [UserForm/ProductForm] with:
- Fields: [listar campos espec√≠ficos del backend]
- Validation states and error messages
- Submit button with loading state
- Multi-step layout if complex
- Auto-save functionality visual feedback
- Responsive form layout"

**3. Layout Components:**
Prompt: "Create dashboard layout for [tipo de usuario]:
- Sidebar navigation with [menu items espec√≠ficos]
- Header with user profile and notifications
- Main content area with [espec√≠ficos widgets]
- Mobile responsive with hamburger menu
- Dark/light mode support
- Role-based navigation visibility"

**4. Data Table Components:**
Prompt: "Build data table for [entity name]:
- Columns: [espec√≠ficos fields del backend]
- Sorting, filtering, and pagination
- Bulk actions: [delete, export, etc]
- Row actions: [edit, view, delete]
- Loading states and empty states
- Export functionality
- Mobile-responsive table design"

**Refinement Strategy:**
1. Generate base component con v0.dev
2. Refine con GitHub Copilot para logic
3. Add TypeScript interfaces
4. Connect con backend API
5. Add error handling y loading states`,
      },
      {
        title: "13. Dise√±o UI/UX y Design System",
        description: "Crear design system completo basado en la funcionalidad backend",
        prompt: `Crea design system completo para esta aplicaci√≥n:

**App context:** [tipo de aplicaci√≥n: dashboard, e-commerce, etc]
**User types:** [admin, customer, vendor, etc]
**Key features:** [login, products, orders, analytics, etc]

**Design System Components:**

**1. Design Tokens:**
- Color palette (primary, secondary, success, error, warning)
- Typography scale (headings, body, captions)
- Spacing system (4px base grid)
- Border radius values
- Shadow/elevation system
- Responsive breakpoints

**2. Component Library:**
- Button variants (primary, secondary, ghost, danger)
- Input controls (text, select, checkbox, radio, file)
- Navigation (sidebar, tabs, breadcrumbs, pagination)
- Feedback (alerts, toasts, loading states, empty states)
- Layout (container, grid, card, modal, drawer)
- Data display (table, list, stats cards, charts)

**3. Patterns y Templates:**
- Dashboard layouts para different user roles
- Form layouts (single column, two column, multi-step)
- List/grid patterns para data display
- Detail page layouts
- Error page templates

**4. Implementaci√≥n Tailwind:**
- tailwind.config.js con custom tokens
- Component classes con @apply directives
- Responsive utility classes
- Dark mode configuration

**5. Storybook Documentation:**
- Component stories con all variants
- Interactive props controls
- Usage guidelines
- Accessibility notes
- Code examples

**6. Figma Integration:**
- Design tokens sync
- Component documentation
- Handoff specifications
- Responsive behavior documentation

**Consideraciones especiales:**
- Accessibility (WCAG 2.1 AA minimum)
- Performance (optimized CSS bundle)
- Maintainability (clear naming conventions)
- Scalability (easy to extend)
- Brand consistency (matches company identity)`,
      },
      {
        title: "14. Performance y Optimizaci√≥n Final",
        description: "Optimizar la aplicaci√≥n completa frontend-backend",
        prompt: `Optimiza la aplicaci√≥n completa para m√°ximo performance:

**Current stack:** [Next.js, TypeScript, Tailwind, etc]
**Backend info:** [API response times, data sizes, etc]

**Performance Optimization Strategy:**

**1. Bundle Optimization:**
- Code splitting estrat√©gico por rutas
- Dynamic imports para heavy components
- Tree shaking optimization
- Bundle analyzer insights y recommendations

**2. Data Fetching Optimization:**
- Request batching donde sea posible
- Prefetching para rutas anticipadas
- Infinite scrolling vs pagination analysis
- Caching strategy optimization

**3. Image y Asset Optimization:**
- Next.js Image component optimization
- WebP/AVIF format conversion
- Responsive image strategies
- CDN integration recommendations

**4. Core Web Vitals Optimization:**
- LCP improvement strategies
- FID optimization techniques
- CLS prevention patterns
- Performance monitoring setup

**5. Lighthouse Audit Implementation:**
- Automated performance testing
- CI/CD integration para performance budgets
- Progressive Web App features
- SEO optimization

**6. Monitoring y Analytics:**
- Real User Monitoring (RUM) setup
- Performance tracking dashboard
- Error tracking con Sentry
- User behavior analytics

**Configuration files:**
- next.config.js optimizado
- webpack optimizations
- Performance budgets
- Monitoring setup

**Expected Results:**
- Lighthouse score 95+
- Core Web Vitals passing
- Bundle size < [target size]
- API response times < 200ms
- Time to Interactive < 3s`,
      },
    ],

    projectTasks: [
      { name: "üìã Definir funcionalidades del e-commerce", completed: false },
      { name: "üé® Crear mockups y wireframes", completed: false },
      { name: "üèóÔ∏è Configurar proyecto Next.js + TypeScript", completed: false },
      { name: "üíÖ Instalar y configurar Tailwind CSS", completed: false },
      { name: "üì¶ Crear componente ProductCard", completed: false },
      { name: "üõí Implementar carrito de compras", completed: false },
      { name: "üîç Crear p√°gina de productos", completed: false },
      { name: "üì± Hacer dise√±o responsive", completed: false },
      { name: "üîê Implementar autenticaci√≥n", completed: false },
      { name: "üí≥ Crear proceso de checkout", completed: false },
      { name: "üåê Conectar con API backend", completed: false },
      { name: "üß™ Escribir tests unitarios", completed: false },
      { name: "‚ôø Validar accesibilidad", completed: false },
      { name: "‚ö° Optimizar performance", completed: false },
      { name: "üöÄ Configurar CI/CD", completed: false },
      { name: "üìä Implementar analytics", completed: false },
      { name: "üåç Desplegar en Vercel", completed: false },
      { name: "üìù Documentar el proyecto", completed: false },
      { name: "ü§ñ Configurar herramientas IA (v0.dev, Copilot)", completed: false },
      { name: "üé® Generar assets con IA (im√°genes, iconos)", completed: false },
      { name: "üß™ Implementar AI Visual Testing", completed: false },
      { name: "‚ö° Configurar AI Performance Monitoring", completed: false },
      { name: "üìä Setup AI Analytics y Insights", completed: false },
      { name: "üîÑ Optimizar workflow con IA", completed: false },
      // === TAREAS AVANZADAS IA (PASO 2) ===
      { name: "üéØ Configurar AI Content Generation Pipeline", completed: false },
      { name: "ü§ñ Setup GitHub Copilot Workflows Personalizados", completed: false },
      { name: "üé® Implementar AI Asset Optimization Pipeline", completed: false },
      { name: "üìê Crear Templates de Componentes con IA", completed: false },
      { name: "üß™ Configurar AI Testing Suite Completa", completed: false },
      { name: "‚ö° Implementar AI Performance Optimization", completed: false },
      { name: "üìä Setup Real User Monitoring con IA", completed: false },
      { name: "üéØ Configurar A/B Testing con IA", completed: false },
      { name: "üîç Implementar AI SEO Optimization", completed: false },
      { name: "üöÄ Setup CI/CD con validaciones IA", completed: false },
    ],

    init() {
      this.loadProgress();
      this.loadDarkMode();
      // Auto-save progress every 30 seconds
      setInterval(() => this.saveProgress(), 30000);
    },

    selectModule(index) {
      this.selectedModule = index;
    },

    toggleModuleComplete(index) {
      this.modules[index].completed = !this.modules[index].completed;
      this.saveProgress();
    },

    calculateProgress() {
      const completedModules = this.getCompletedModules().length;
      const totalModules = this.modules.length;
      return (completedModules / totalModules) * 88; // 88 is circumference for progress ring
    },

    getCompletedModules() {
      return this.modules.filter((module) => module.completed);
    },

    copyToClipboard(text) {
      navigator.clipboard
        .writeText(text)
        .then(() => {
          // Show temporary feedback
          const button = event.target;
          const originalText = button.textContent;
          button.textContent = "‚úì Copiado!";
          button.classList.add("bg-green-600");

          setTimeout(() => {
            button.textContent = originalText;
            button.classList.remove("bg-green-600");
          }, 2000);
        })
        .catch(() => {
          // Fallback for older browsers
          const textArea = document.createElement("textarea");
          textArea.value = text;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand("copy");
          document.body.removeChild(textArea);
        });
    },

    saveProgress() {
      const progressData = {
        modules: this.modules.map((module) => ({
          title: module.title,
          completed: module.completed,
        })),
        projectTasks: this.projectTasks,
        lastUpdated: new Date().toISOString(),
      };
      localStorage.setItem("frontend-course-progress", JSON.stringify(progressData));
    },

    loadProgress() {
      const saved = localStorage.getItem("frontend-course-progress");
      if (saved) {
        const progressData = JSON.parse(saved);

        // Update module completion status
        if (progressData.modules) {
          progressData.modules.forEach((savedModule, index) => {
            if (this.modules[index] && savedModule.title === this.modules[index].title) {
              this.modules[index].completed = savedModule.completed;
            }
          });
        }

        // Update project tasks
        if (progressData.projectTasks) {
          progressData.projectTasks.forEach((savedTask, index) => {
            if (this.projectTasks[index]) {
              this.projectTasks[index].completed = savedTask.completed;
            }
          });
        }
      }
    },

    resetAllProgress() {
      if (confirm("¬øEst√°s seguro de que quieres reiniciar todo el progreso? Esta acci√≥n no se puede deshacer.")) {
        // Resetear todos los m√≥dulos
        this.modules.forEach((module) => {
          module.completed = false;
        });

        // Resetear todas las tareas del proyecto
        this.projectTasks.forEach((task) => {
          task.completed = false;
        });

        // Limpiar el localStorage
        localStorage.removeItem("frontend-course-progress");

        alert("¬°Progreso reiniciado exitosamente!");
      }
    },

    resetModuleProgress(moduleIndex) {
      if (confirm(`¬øEst√°s seguro de que quieres reiniciar el progreso del ${this.modules[moduleIndex].title}?`)) {
        this.modules[moduleIndex].completed = false;
        this.saveProgress();
        alert(`Progreso del ${this.modules[moduleIndex].title} reiniciado exitosamente!`);
      }
    },

    exportProgress() {
      const progressData = {
        course: "Frontend Esencial",
        completedModules: this.getCompletedModules().map((m) => m.title),
        completedTasks: this.projectTasks.filter((t) => t.completed).map((t) => t.name),
        progressPercentage: Math.round((this.calculateProgress() * 100) / 88),
        exportDate: new Date().toISOString(),
      };

      const blob = new Blob([JSON.stringify(progressData, null, 2)], {
        type: "application/json",
      });

      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "frontend-course-progress.json";
      a.click();
      URL.revokeObjectURL(url);
    },

    // Dark Mode Functions
    toggleDarkMode() {
      this.darkMode = !this.darkMode;
      this.saveDarkMode();
    },

    loadDarkMode() {
      const saved = localStorage.getItem("frontend-course-dark-mode");
      if (saved) {
        this.darkMode = JSON.parse(saved);
      } else {
        // Check system preference
        this.darkMode = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
      }
    },

    saveDarkMode() {
      localStorage.setItem("frontend-course-dark-mode", JSON.stringify(this.darkMode));
    },
  };
}
